// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// External interface for robot <-> app and robot <-> sdk communication

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.4
// source: external_interface.proto

package vectorpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// <p>The valid versions of the protocol.</p>
// <p>Protocol versions are updated when messages change significantly:
// new ones are added and removed, fields deprecated, etc.</p>
// <p>The goal is to support as many old versions as possible, only
// bumping the minimum when there is no way to handle a prior version.</p>
type ProtocolVersion int32

const (
	ProtocolVersion_PROTOCOL_VERSION_UNKNOWN ProtocolVersion = 0 // Required zero value for enums
	ProtocolVersion_PROTOCOL_VERSION_MINIMUM ProtocolVersion = 0 // Minimum supported version
	ProtocolVersion_PROTOCOL_VERSION_CURRENT ProtocolVersion = 5 // Current version (incremented on 2019.03.12 for streaming update status support.)
)

// Enum value maps for ProtocolVersion.
var (
	ProtocolVersion_name = map[int32]string{
		0: "PROTOCOL_VERSION_UNKNOWN",
		// Duplicate value: 0: "PROTOCOL_VERSION_MINIMUM",
		5: "PROTOCOL_VERSION_CURRENT",
	}
	ProtocolVersion_value = map[string]int32{
		"PROTOCOL_VERSION_UNKNOWN": 0,
		"PROTOCOL_VERSION_MINIMUM": 0,
		"PROTOCOL_VERSION_CURRENT": 5,
	}
)

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}

func (x ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_external_interface_proto_enumTypes[0].Descriptor()
}

func (ProtocolVersion) Type() protoreflect.EnumType {
	return &file_external_interface_proto_enumTypes[0]
}

func (x ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolVersion.Descriptor instead.
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_external_interface_proto_rawDescGZIP(), []int{0}
}

var File_external_interface_proto protoreflect.FileDescriptor

var file_external_interface_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61, 0x6c, 0x65, 0x78, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x6e, 0x61, 0x76, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x6f,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x02, 0x10, 0x01, 0x32,
	0xb0, 0x68, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xab, 0x01, 0x0a, 0x11,
	0x53, 0x44, 0x4b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x44, 0x4b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x44, 0x4b,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x64, 0x6b, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0b, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x57,
	0x68, 0x65, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x3c,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x66, 0x74,
	0x12, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c,
	0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4d,
	0x6f, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb5, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x47, 0x42, 0x12, 0x3a, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x47, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x47, 0x42, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x67, 0x62, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x5a, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x9c, 0x01,
	0x0a, 0x1b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x88, 0x01, 0x0a,
	0x0f, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x75,
	0x6d, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0xb8, 0x01, 0x0a,
	0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x63,
	0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xb8, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x3b, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xc2, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x3d, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x3c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x46, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61,
	0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x61, 0x73,
	0x65, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x15, 0x45, 0x72, 0x61,
	0x73, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x3c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x61,
	0x73, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x46, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x36, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x46, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x3a, 0x01, 0x2a,
	0x12, 0xbc, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xb4, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0xb8, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x17,
	0x49, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x54, 0x61, 0x67, 0x12, 0x3a, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a,
	0x08, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x54, 0x6f, 0x50,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x54, 0x6f,
	0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x6f, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x6b,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x62, 0x65, 0x12, 0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x6f, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x62, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x66,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x0e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a,
	0x09, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x46, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e,
	0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x4c,
	0x6f, 0x6f, 0x6b, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x52,
	0x6f, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x05, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x0d, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0b, 0x54, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x72, 0x6e, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7e, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x84, 0x01, 0x0a, 0x0f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x46, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x72, 0x6e, 0x54, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0a, 0x47, 0x6f, 0x54, 0x6f, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x54, 0x6f, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0b, 0x50, 0x6f, 0x70, 0x41, 0x57, 0x68, 0x65,
	0x65, 0x6c, 0x69, 0x65, 0x12, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x70, 0x41, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x69,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x70, 0x41, 0x57, 0x68,
	0x65, 0x65, 0x6c, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x0c, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a,
	0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x65, 0x12, 0x3e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x65, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x65, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x33,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaf, 0x01, 0x0a, 0x12,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x97, 0x01,
	0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x53, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x79, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x43, 0x75, 0x62, 0x65, 0x12, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x43, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x43, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x75, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01,
	0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x75, 0x62, 0x65,
	0x12, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x75, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x43, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x75, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x9f, 0x01, 0x0a, 0x0e, 0x43, 0x75, 0x62, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x75, 0x62, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x75, 0x62, 0x65, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x75, 0x62, 0x65,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x75, 0x62, 0x65, 0x5f, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb4, 0x01, 0x0a, 0x13, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x75, 0x62, 0x65,
	0x12, 0x3a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x43, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6f,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x75, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0xa8, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x43, 0x75, 0x62, 0x65, 0x12, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x43, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x75, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x75, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb4, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x3a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22,
	0x18, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x34, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a,
	0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x12, 0x30, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x91, 0x01, 0x0a,
	0x0a, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01,
	0x12, 0xb0, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x45, 0x79, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x79, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x79,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x0a, 0x4e,
	0x61, 0x76, 0x4d, 0x61, 0x70, 0x46, 0x65, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x76, 0x4d, 0x61,
	0x70, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61,
	0x76, 0x4d, 0x61, 0x70, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61,
	0x76, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12,
	0x8b, 0x01, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xaa, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a, 0x13, 0x53,
	0x65, 0x6e, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c,
	0x4a, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x30, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4a, 0x64, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4a, 0x64, 0x6f,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x6a, 0x64, 0x6f,
	0x63, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22,
	0x13, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0xa4, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x3a, 0x01, 0x2a, 0x12,
	0xa7, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xa3, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x78,
	0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x90, 0x01, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x12, 0x31,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x41, 0x6c, 0x65, 0x78, 0x61, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x78, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x3a,
	0x01, 0x2a, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x6c,
	0x61, 0x62, 0x73, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_interface_proto_rawDescOnce sync.Once
	file_external_interface_proto_rawDescData = file_external_interface_proto_rawDesc
)

func file_external_interface_proto_rawDescGZIP() []byte {
	file_external_interface_proto_rawDescOnce.Do(func() {
		file_external_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_interface_proto_rawDescData)
	})
	return file_external_interface_proto_rawDescData
}

var file_external_interface_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_external_interface_proto_goTypes = []interface{}{
	(ProtocolVersion)(0),                    // 0: Anki.Vector.external_interface.ProtocolVersion
	(*ProtocolVersionRequest)(nil),          // 1: Anki.Vector.external_interface.ProtocolVersionRequest
	(*SDKInitializationRequest)(nil),        // 2: Anki.Vector.external_interface.SDKInitializationRequest
	(*DriveWheelsRequest)(nil),              // 3: Anki.Vector.external_interface.DriveWheelsRequest
	(*PlayAnimationTriggerRequest)(nil),     // 4: Anki.Vector.external_interface.PlayAnimationTriggerRequest
	(*PlayAnimationRequest)(nil),            // 5: Anki.Vector.external_interface.PlayAnimationRequest
	(*ListAnimationsRequest)(nil),           // 6: Anki.Vector.external_interface.ListAnimationsRequest
	(*ListAnimationTriggersRequest)(nil),    // 7: Anki.Vector.external_interface.ListAnimationTriggersRequest
	(*MoveHeadRequest)(nil),                 // 8: Anki.Vector.external_interface.MoveHeadRequest
	(*MoveLiftRequest)(nil),                 // 9: Anki.Vector.external_interface.MoveLiftRequest
	(*StopAllMotorsRequest)(nil),            // 10: Anki.Vector.external_interface.StopAllMotorsRequest
	(*DisplayFaceImageRGBRequest)(nil),      // 11: Anki.Vector.external_interface.DisplayFaceImageRGBRequest
	(*EventRequest)(nil),                    // 12: Anki.Vector.external_interface.EventRequest
	(*ExternalAudioStreamRequest)(nil),      // 13: Anki.Vector.external_interface.ExternalAudioStreamRequest
	(*BehaviorControlRequest)(nil),          // 14: Anki.Vector.external_interface.BehaviorControlRequest
	(*CancelFaceEnrollmentRequest)(nil),     // 15: Anki.Vector.external_interface.CancelFaceEnrollmentRequest
	(*RequestEnrolledNamesRequest)(nil),     // 16: Anki.Vector.external_interface.RequestEnrolledNamesRequest
	(*UpdateEnrolledFaceByIDRequest)(nil),   // 17: Anki.Vector.external_interface.UpdateEnrolledFaceByIDRequest
	(*EraseEnrolledFaceByIDRequest)(nil),    // 18: Anki.Vector.external_interface.EraseEnrolledFaceByIDRequest
	(*EraseAllEnrolledFacesRequest)(nil),    // 19: Anki.Vector.external_interface.EraseAllEnrolledFacesRequest
	(*SetFaceToEnrollRequest)(nil),          // 20: Anki.Vector.external_interface.SetFaceToEnrollRequest
	(*EnableMarkerDetectionRequest)(nil),    // 21: Anki.Vector.external_interface.EnableMarkerDetectionRequest
	(*EnableFaceDetectionRequest)(nil),      // 22: Anki.Vector.external_interface.EnableFaceDetectionRequest
	(*EnableMotionDetectionRequest)(nil),    // 23: Anki.Vector.external_interface.EnableMotionDetectionRequest
	(*EnableMirrorModeRequest)(nil),         // 24: Anki.Vector.external_interface.EnableMirrorModeRequest
	(*EnableImageStreamingRequest)(nil),     // 25: Anki.Vector.external_interface.EnableImageStreamingRequest
	(*IsImageStreamingEnabledRequest)(nil),  // 26: Anki.Vector.external_interface.IsImageStreamingEnabledRequest
	(*CancelActionByIdTagRequest)(nil),      // 27: Anki.Vector.external_interface.CancelActionByIdTagRequest
	(*GoToPoseRequest)(nil),                 // 28: Anki.Vector.external_interface.GoToPoseRequest
	(*DockWithCubeRequest)(nil),             // 29: Anki.Vector.external_interface.DockWithCubeRequest
	(*DriveOffChargerRequest)(nil),          // 30: Anki.Vector.external_interface.DriveOffChargerRequest
	(*DriveOnChargerRequest)(nil),           // 31: Anki.Vector.external_interface.DriveOnChargerRequest
	(*FindFacesRequest)(nil),                // 32: Anki.Vector.external_interface.FindFacesRequest
	(*LookAroundInPlaceRequest)(nil),        // 33: Anki.Vector.external_interface.LookAroundInPlaceRequest
	(*RollBlockRequest)(nil),                // 34: Anki.Vector.external_interface.RollBlockRequest
	(*PhotosInfoRequest)(nil),               // 35: Anki.Vector.external_interface.PhotosInfoRequest
	(*PhotoRequest)(nil),                    // 36: Anki.Vector.external_interface.PhotoRequest
	(*ThumbnailRequest)(nil),                // 37: Anki.Vector.external_interface.ThumbnailRequest
	(*DeletePhotoRequest)(nil),              // 38: Anki.Vector.external_interface.DeletePhotoRequest
	(*DriveStraightRequest)(nil),            // 39: Anki.Vector.external_interface.DriveStraightRequest
	(*TurnInPlaceRequest)(nil),              // 40: Anki.Vector.external_interface.TurnInPlaceRequest
	(*SetHeadAngleRequest)(nil),             // 41: Anki.Vector.external_interface.SetHeadAngleRequest
	(*SetLiftHeightRequest)(nil),            // 42: Anki.Vector.external_interface.SetLiftHeightRequest
	(*TurnTowardsFaceRequest)(nil),          // 43: Anki.Vector.external_interface.TurnTowardsFaceRequest
	(*GoToObjectRequest)(nil),               // 44: Anki.Vector.external_interface.GoToObjectRequest
	(*RollObjectRequest)(nil),               // 45: Anki.Vector.external_interface.RollObjectRequest
	(*PopAWheelieRequest)(nil),              // 46: Anki.Vector.external_interface.PopAWheelieRequest
	(*PickupObjectRequest)(nil),             // 47: Anki.Vector.external_interface.PickupObjectRequest
	(*PlaceObjectOnGroundHereRequest)(nil),  // 48: Anki.Vector.external_interface.PlaceObjectOnGroundHereRequest
	(*MasterVolumeRequest)(nil),             // 49: Anki.Vector.external_interface.MasterVolumeRequest
	(*UserAuthenticationRequest)(nil),       // 50: Anki.Vector.external_interface.UserAuthenticationRequest
	(*BatteryStateRequest)(nil),             // 51: Anki.Vector.external_interface.BatteryStateRequest
	(*VersionStateRequest)(nil),             // 52: Anki.Vector.external_interface.VersionStateRequest
	(*SayTextRequest)(nil),                  // 53: Anki.Vector.external_interface.SayTextRequest
	(*ConnectCubeRequest)(nil),              // 54: Anki.Vector.external_interface.ConnectCubeRequest
	(*DisconnectCubeRequest)(nil),           // 55: Anki.Vector.external_interface.DisconnectCubeRequest
	(*CubesAvailableRequest)(nil),           // 56: Anki.Vector.external_interface.CubesAvailableRequest
	(*FlashCubeLightsRequest)(nil),          // 57: Anki.Vector.external_interface.FlashCubeLightsRequest
	(*ForgetPreferredCubeRequest)(nil),      // 58: Anki.Vector.external_interface.ForgetPreferredCubeRequest
	(*SetPreferredCubeRequest)(nil),         // 59: Anki.Vector.external_interface.SetPreferredCubeRequest
	(*DeleteCustomObjectsRequest)(nil),      // 60: Anki.Vector.external_interface.DeleteCustomObjectsRequest
	(*CreateFixedCustomObjectRequest)(nil),  // 61: Anki.Vector.external_interface.CreateFixedCustomObjectRequest
	(*DefineCustomObjectRequest)(nil),       // 62: Anki.Vector.external_interface.DefineCustomObjectRequest
	(*SetCubeLightsRequest)(nil),            // 63: Anki.Vector.external_interface.SetCubeLightsRequest
	(*AudioFeedRequest)(nil),                // 64: Anki.Vector.external_interface.AudioFeedRequest
	(*CameraFeedRequest)(nil),               // 65: Anki.Vector.external_interface.CameraFeedRequest
	(*CaptureSingleImageRequest)(nil),       // 66: Anki.Vector.external_interface.CaptureSingleImageRequest
	(*SetEyeColorRequest)(nil),              // 67: Anki.Vector.external_interface.SetEyeColorRequest
	(*NavMapFeedRequest)(nil),               // 68: Anki.Vector.external_interface.NavMapFeedRequest
	(*AppIntentRequest)(nil),                // 69: Anki.Vector.external_interface.AppIntentRequest
	(*OnboardingStateRequest)(nil),          // 70: Anki.Vector.external_interface.OnboardingStateRequest
	(*OnboardingInputRequest)(nil),          // 71: Anki.Vector.external_interface.OnboardingInputRequest
	(*LatestAttentionTransferRequest)(nil),  // 72: Anki.Vector.external_interface.LatestAttentionTransferRequest
	(*PullJdocsRequest)(nil),                // 73: Anki.Vector.external_interface.PullJdocsRequest
	(*UpdateSettingsRequest)(nil),           // 74: Anki.Vector.external_interface.UpdateSettingsRequest
	(*UpdateAccountSettingsRequest)(nil),    // 75: Anki.Vector.external_interface.UpdateAccountSettingsRequest
	(*CheckUpdateStatusRequest)(nil),        // 76: Anki.Vector.external_interface.CheckUpdateStatusRequest
	(*UpdateAndRestartRequest)(nil),         // 77: Anki.Vector.external_interface.UpdateAndRestartRequest
	(*CheckCloudRequest)(nil),               // 78: Anki.Vector.external_interface.CheckCloudRequest
	(*FeatureFlagRequest)(nil),              // 79: Anki.Vector.external_interface.FeatureFlagRequest
	(*FeatureFlagListRequest)(nil),          // 80: Anki.Vector.external_interface.FeatureFlagListRequest
	(*AlexaAuthStateRequest)(nil),           // 81: Anki.Vector.external_interface.AlexaAuthStateRequest
	(*AlexaOptInRequest)(nil),               // 82: Anki.Vector.external_interface.AlexaOptInRequest
	(*ProtocolVersionResponse)(nil),         // 83: Anki.Vector.external_interface.ProtocolVersionResponse
	(*SDKInitializationResponse)(nil),       // 84: Anki.Vector.external_interface.SDKInitializationResponse
	(*DriveWheelsResponse)(nil),             // 85: Anki.Vector.external_interface.DriveWheelsResponse
	(*PlayAnimationResponse)(nil),           // 86: Anki.Vector.external_interface.PlayAnimationResponse
	(*ListAnimationsResponse)(nil),          // 87: Anki.Vector.external_interface.ListAnimationsResponse
	(*ListAnimationTriggersResponse)(nil),   // 88: Anki.Vector.external_interface.ListAnimationTriggersResponse
	(*MoveHeadResponse)(nil),                // 89: Anki.Vector.external_interface.MoveHeadResponse
	(*MoveLiftResponse)(nil),                // 90: Anki.Vector.external_interface.MoveLiftResponse
	(*StopAllMotorsResponse)(nil),           // 91: Anki.Vector.external_interface.StopAllMotorsResponse
	(*DisplayFaceImageRGBResponse)(nil),     // 92: Anki.Vector.external_interface.DisplayFaceImageRGBResponse
	(*EventResponse)(nil),                   // 93: Anki.Vector.external_interface.EventResponse
	(*ExternalAudioStreamResponse)(nil),     // 94: Anki.Vector.external_interface.ExternalAudioStreamResponse
	(*BehaviorControlResponse)(nil),         // 95: Anki.Vector.external_interface.BehaviorControlResponse
	(*CancelFaceEnrollmentResponse)(nil),    // 96: Anki.Vector.external_interface.CancelFaceEnrollmentResponse
	(*RequestEnrolledNamesResponse)(nil),    // 97: Anki.Vector.external_interface.RequestEnrolledNamesResponse
	(*UpdateEnrolledFaceByIDResponse)(nil),  // 98: Anki.Vector.external_interface.UpdateEnrolledFaceByIDResponse
	(*EraseEnrolledFaceByIDResponse)(nil),   // 99: Anki.Vector.external_interface.EraseEnrolledFaceByIDResponse
	(*EraseAllEnrolledFacesResponse)(nil),   // 100: Anki.Vector.external_interface.EraseAllEnrolledFacesResponse
	(*SetFaceToEnrollResponse)(nil),         // 101: Anki.Vector.external_interface.SetFaceToEnrollResponse
	(*EnableMarkerDetectionResponse)(nil),   // 102: Anki.Vector.external_interface.EnableMarkerDetectionResponse
	(*EnableFaceDetectionResponse)(nil),     // 103: Anki.Vector.external_interface.EnableFaceDetectionResponse
	(*EnableMotionDetectionResponse)(nil),   // 104: Anki.Vector.external_interface.EnableMotionDetectionResponse
	(*EnableMirrorModeResponse)(nil),        // 105: Anki.Vector.external_interface.EnableMirrorModeResponse
	(*EnableImageStreamingResponse)(nil),    // 106: Anki.Vector.external_interface.EnableImageStreamingResponse
	(*IsImageStreamingEnabledResponse)(nil), // 107: Anki.Vector.external_interface.IsImageStreamingEnabledResponse
	(*CancelActionByIdTagResponse)(nil),     // 108: Anki.Vector.external_interface.CancelActionByIdTagResponse
	(*GoToPoseResponse)(nil),                // 109: Anki.Vector.external_interface.GoToPoseResponse
	(*DockWithCubeResponse)(nil),            // 110: Anki.Vector.external_interface.DockWithCubeResponse
	(*DriveOffChargerResponse)(nil),         // 111: Anki.Vector.external_interface.DriveOffChargerResponse
	(*DriveOnChargerResponse)(nil),          // 112: Anki.Vector.external_interface.DriveOnChargerResponse
	(*FindFacesResponse)(nil),               // 113: Anki.Vector.external_interface.FindFacesResponse
	(*LookAroundInPlaceResponse)(nil),       // 114: Anki.Vector.external_interface.LookAroundInPlaceResponse
	(*RollBlockResponse)(nil),               // 115: Anki.Vector.external_interface.RollBlockResponse
	(*PhotosInfoResponse)(nil),              // 116: Anki.Vector.external_interface.PhotosInfoResponse
	(*PhotoResponse)(nil),                   // 117: Anki.Vector.external_interface.PhotoResponse
	(*ThumbnailResponse)(nil),               // 118: Anki.Vector.external_interface.ThumbnailResponse
	(*DeletePhotoResponse)(nil),             // 119: Anki.Vector.external_interface.DeletePhotoResponse
	(*DriveStraightResponse)(nil),           // 120: Anki.Vector.external_interface.DriveStraightResponse
	(*TurnInPlaceResponse)(nil),             // 121: Anki.Vector.external_interface.TurnInPlaceResponse
	(*SetHeadAngleResponse)(nil),            // 122: Anki.Vector.external_interface.SetHeadAngleResponse
	(*SetLiftHeightResponse)(nil),           // 123: Anki.Vector.external_interface.SetLiftHeightResponse
	(*TurnTowardsFaceResponse)(nil),         // 124: Anki.Vector.external_interface.TurnTowardsFaceResponse
	(*GoToObjectResponse)(nil),              // 125: Anki.Vector.external_interface.GoToObjectResponse
	(*RollObjectResponse)(nil),              // 126: Anki.Vector.external_interface.RollObjectResponse
	(*PopAWheelieResponse)(nil),             // 127: Anki.Vector.external_interface.PopAWheelieResponse
	(*PickupObjectResponse)(nil),            // 128: Anki.Vector.external_interface.PickupObjectResponse
	(*PlaceObjectOnGroundHereResponse)(nil), // 129: Anki.Vector.external_interface.PlaceObjectOnGroundHereResponse
	(*MasterVolumeResponse)(nil),            // 130: Anki.Vector.external_interface.MasterVolumeResponse
	(*UserAuthenticationResponse)(nil),      // 131: Anki.Vector.external_interface.UserAuthenticationResponse
	(*BatteryStateResponse)(nil),            // 132: Anki.Vector.external_interface.BatteryStateResponse
	(*VersionStateResponse)(nil),            // 133: Anki.Vector.external_interface.VersionStateResponse
	(*SayTextResponse)(nil),                 // 134: Anki.Vector.external_interface.SayTextResponse
	(*ConnectCubeResponse)(nil),             // 135: Anki.Vector.external_interface.ConnectCubeResponse
	(*DisconnectCubeResponse)(nil),          // 136: Anki.Vector.external_interface.DisconnectCubeResponse
	(*CubesAvailableResponse)(nil),          // 137: Anki.Vector.external_interface.CubesAvailableResponse
	(*FlashCubeLightsResponse)(nil),         // 138: Anki.Vector.external_interface.FlashCubeLightsResponse
	(*ForgetPreferredCubeResponse)(nil),     // 139: Anki.Vector.external_interface.ForgetPreferredCubeResponse
	(*SetPreferredCubeResponse)(nil),        // 140: Anki.Vector.external_interface.SetPreferredCubeResponse
	(*DeleteCustomObjectsResponse)(nil),     // 141: Anki.Vector.external_interface.DeleteCustomObjectsResponse
	(*CreateFixedCustomObjectResponse)(nil), // 142: Anki.Vector.external_interface.CreateFixedCustomObjectResponse
	(*DefineCustomObjectResponse)(nil),      // 143: Anki.Vector.external_interface.DefineCustomObjectResponse
	(*SetCubeLightsResponse)(nil),           // 144: Anki.Vector.external_interface.SetCubeLightsResponse
	(*AudioFeedResponse)(nil),               // 145: Anki.Vector.external_interface.AudioFeedResponse
	(*CameraFeedResponse)(nil),              // 146: Anki.Vector.external_interface.CameraFeedResponse
	(*CaptureSingleImageResponse)(nil),      // 147: Anki.Vector.external_interface.CaptureSingleImageResponse
	(*SetEyeColorResponse)(nil),             // 148: Anki.Vector.external_interface.SetEyeColorResponse
	(*NavMapFeedResponse)(nil),              // 149: Anki.Vector.external_interface.NavMapFeedResponse
	(*AppIntentResponse)(nil),               // 150: Anki.Vector.external_interface.AppIntentResponse
	(*OnboardingStateResponse)(nil),         // 151: Anki.Vector.external_interface.OnboardingStateResponse
	(*OnboardingInputResponse)(nil),         // 152: Anki.Vector.external_interface.OnboardingInputResponse
	(*LatestAttentionTransferResponse)(nil), // 153: Anki.Vector.external_interface.LatestAttentionTransferResponse
	(*PullJdocsResponse)(nil),               // 154: Anki.Vector.external_interface.PullJdocsResponse
	(*UpdateSettingsResponse)(nil),          // 155: Anki.Vector.external_interface.UpdateSettingsResponse
	(*UpdateAccountSettingsResponse)(nil),   // 156: Anki.Vector.external_interface.UpdateAccountSettingsResponse
	(*CheckUpdateStatusResponse)(nil),       // 157: Anki.Vector.external_interface.CheckUpdateStatusResponse
	(*UpdateAndRestartResponse)(nil),        // 158: Anki.Vector.external_interface.UpdateAndRestartResponse
	(*CheckCloudResponse)(nil),              // 159: Anki.Vector.external_interface.CheckCloudResponse
	(*FeatureFlagResponse)(nil),             // 160: Anki.Vector.external_interface.FeatureFlagResponse
	(*FeatureFlagListResponse)(nil),         // 161: Anki.Vector.external_interface.FeatureFlagListResponse
	(*AlexaAuthStateResponse)(nil),          // 162: Anki.Vector.external_interface.AlexaAuthStateResponse
	(*AlexaOptInResponse)(nil),              // 163: Anki.Vector.external_interface.AlexaOptInResponse
}
var file_external_interface_proto_depIdxs = []int32{
	1,   // 0: Anki.Vector.external_interface.ExternalInterface.ProtocolVersion:input_type -> Anki.Vector.external_interface.ProtocolVersionRequest
	2,   // 1: Anki.Vector.external_interface.ExternalInterface.SDKInitialization:input_type -> Anki.Vector.external_interface.SDKInitializationRequest
	3,   // 2: Anki.Vector.external_interface.ExternalInterface.DriveWheels:input_type -> Anki.Vector.external_interface.DriveWheelsRequest
	4,   // 3: Anki.Vector.external_interface.ExternalInterface.PlayAnimationTrigger:input_type -> Anki.Vector.external_interface.PlayAnimationTriggerRequest
	5,   // 4: Anki.Vector.external_interface.ExternalInterface.PlayAnimation:input_type -> Anki.Vector.external_interface.PlayAnimationRequest
	6,   // 5: Anki.Vector.external_interface.ExternalInterface.ListAnimations:input_type -> Anki.Vector.external_interface.ListAnimationsRequest
	7,   // 6: Anki.Vector.external_interface.ExternalInterface.ListAnimationTriggers:input_type -> Anki.Vector.external_interface.ListAnimationTriggersRequest
	8,   // 7: Anki.Vector.external_interface.ExternalInterface.MoveHead:input_type -> Anki.Vector.external_interface.MoveHeadRequest
	9,   // 8: Anki.Vector.external_interface.ExternalInterface.MoveLift:input_type -> Anki.Vector.external_interface.MoveLiftRequest
	10,  // 9: Anki.Vector.external_interface.ExternalInterface.StopAllMotors:input_type -> Anki.Vector.external_interface.StopAllMotorsRequest
	11,  // 10: Anki.Vector.external_interface.ExternalInterface.DisplayFaceImageRGB:input_type -> Anki.Vector.external_interface.DisplayFaceImageRGBRequest
	12,  // 11: Anki.Vector.external_interface.ExternalInterface.EventStream:input_type -> Anki.Vector.external_interface.EventRequest
	13,  // 12: Anki.Vector.external_interface.ExternalInterface.ExternalAudioStreamPlayback:input_type -> Anki.Vector.external_interface.ExternalAudioStreamRequest
	14,  // 13: Anki.Vector.external_interface.ExternalInterface.BehaviorControl:input_type -> Anki.Vector.external_interface.BehaviorControlRequest
	14,  // 14: Anki.Vector.external_interface.ExternalInterface.AssumeBehaviorControl:input_type -> Anki.Vector.external_interface.BehaviorControlRequest
	15,  // 15: Anki.Vector.external_interface.ExternalInterface.CancelFaceEnrollment:input_type -> Anki.Vector.external_interface.CancelFaceEnrollmentRequest
	16,  // 16: Anki.Vector.external_interface.ExternalInterface.RequestEnrolledNames:input_type -> Anki.Vector.external_interface.RequestEnrolledNamesRequest
	17,  // 17: Anki.Vector.external_interface.ExternalInterface.UpdateEnrolledFaceByID:input_type -> Anki.Vector.external_interface.UpdateEnrolledFaceByIDRequest
	18,  // 18: Anki.Vector.external_interface.ExternalInterface.EraseEnrolledFaceByID:input_type -> Anki.Vector.external_interface.EraseEnrolledFaceByIDRequest
	19,  // 19: Anki.Vector.external_interface.ExternalInterface.EraseAllEnrolledFaces:input_type -> Anki.Vector.external_interface.EraseAllEnrolledFacesRequest
	20,  // 20: Anki.Vector.external_interface.ExternalInterface.SetFaceToEnroll:input_type -> Anki.Vector.external_interface.SetFaceToEnrollRequest
	21,  // 21: Anki.Vector.external_interface.ExternalInterface.EnableMarkerDetection:input_type -> Anki.Vector.external_interface.EnableMarkerDetectionRequest
	22,  // 22: Anki.Vector.external_interface.ExternalInterface.EnableFaceDetection:input_type -> Anki.Vector.external_interface.EnableFaceDetectionRequest
	23,  // 23: Anki.Vector.external_interface.ExternalInterface.EnableMotionDetection:input_type -> Anki.Vector.external_interface.EnableMotionDetectionRequest
	24,  // 24: Anki.Vector.external_interface.ExternalInterface.EnableMirrorMode:input_type -> Anki.Vector.external_interface.EnableMirrorModeRequest
	25,  // 25: Anki.Vector.external_interface.ExternalInterface.EnableImageStreaming:input_type -> Anki.Vector.external_interface.EnableImageStreamingRequest
	26,  // 26: Anki.Vector.external_interface.ExternalInterface.IsImageStreamingEnabled:input_type -> Anki.Vector.external_interface.IsImageStreamingEnabledRequest
	27,  // 27: Anki.Vector.external_interface.ExternalInterface.CancelActionByIdTag:input_type -> Anki.Vector.external_interface.CancelActionByIdTagRequest
	28,  // 28: Anki.Vector.external_interface.ExternalInterface.GoToPose:input_type -> Anki.Vector.external_interface.GoToPoseRequest
	29,  // 29: Anki.Vector.external_interface.ExternalInterface.DockWithCube:input_type -> Anki.Vector.external_interface.DockWithCubeRequest
	30,  // 30: Anki.Vector.external_interface.ExternalInterface.DriveOffCharger:input_type -> Anki.Vector.external_interface.DriveOffChargerRequest
	31,  // 31: Anki.Vector.external_interface.ExternalInterface.DriveOnCharger:input_type -> Anki.Vector.external_interface.DriveOnChargerRequest
	32,  // 32: Anki.Vector.external_interface.ExternalInterface.FindFaces:input_type -> Anki.Vector.external_interface.FindFacesRequest
	33,  // 33: Anki.Vector.external_interface.ExternalInterface.LookAroundInPlace:input_type -> Anki.Vector.external_interface.LookAroundInPlaceRequest
	34,  // 34: Anki.Vector.external_interface.ExternalInterface.RollBlock:input_type -> Anki.Vector.external_interface.RollBlockRequest
	35,  // 35: Anki.Vector.external_interface.ExternalInterface.PhotosInfo:input_type -> Anki.Vector.external_interface.PhotosInfoRequest
	36,  // 36: Anki.Vector.external_interface.ExternalInterface.Photo:input_type -> Anki.Vector.external_interface.PhotoRequest
	37,  // 37: Anki.Vector.external_interface.ExternalInterface.Thumbnail:input_type -> Anki.Vector.external_interface.ThumbnailRequest
	38,  // 38: Anki.Vector.external_interface.ExternalInterface.DeletePhoto:input_type -> Anki.Vector.external_interface.DeletePhotoRequest
	39,  // 39: Anki.Vector.external_interface.ExternalInterface.DriveStraight:input_type -> Anki.Vector.external_interface.DriveStraightRequest
	40,  // 40: Anki.Vector.external_interface.ExternalInterface.TurnInPlace:input_type -> Anki.Vector.external_interface.TurnInPlaceRequest
	41,  // 41: Anki.Vector.external_interface.ExternalInterface.SetHeadAngle:input_type -> Anki.Vector.external_interface.SetHeadAngleRequest
	42,  // 42: Anki.Vector.external_interface.ExternalInterface.SetLiftHeight:input_type -> Anki.Vector.external_interface.SetLiftHeightRequest
	43,  // 43: Anki.Vector.external_interface.ExternalInterface.TurnTowardsFace:input_type -> Anki.Vector.external_interface.TurnTowardsFaceRequest
	44,  // 44: Anki.Vector.external_interface.ExternalInterface.GoToObject:input_type -> Anki.Vector.external_interface.GoToObjectRequest
	45,  // 45: Anki.Vector.external_interface.ExternalInterface.RollObject:input_type -> Anki.Vector.external_interface.RollObjectRequest
	46,  // 46: Anki.Vector.external_interface.ExternalInterface.PopAWheelie:input_type -> Anki.Vector.external_interface.PopAWheelieRequest
	47,  // 47: Anki.Vector.external_interface.ExternalInterface.PickupObject:input_type -> Anki.Vector.external_interface.PickupObjectRequest
	48,  // 48: Anki.Vector.external_interface.ExternalInterface.PlaceObjectOnGroundHere:input_type -> Anki.Vector.external_interface.PlaceObjectOnGroundHereRequest
	49,  // 49: Anki.Vector.external_interface.ExternalInterface.SetMasterVolume:input_type -> Anki.Vector.external_interface.MasterVolumeRequest
	50,  // 50: Anki.Vector.external_interface.ExternalInterface.UserAuthentication:input_type -> Anki.Vector.external_interface.UserAuthenticationRequest
	51,  // 51: Anki.Vector.external_interface.ExternalInterface.BatteryState:input_type -> Anki.Vector.external_interface.BatteryStateRequest
	52,  // 52: Anki.Vector.external_interface.ExternalInterface.VersionState:input_type -> Anki.Vector.external_interface.VersionStateRequest
	53,  // 53: Anki.Vector.external_interface.ExternalInterface.SayText:input_type -> Anki.Vector.external_interface.SayTextRequest
	54,  // 54: Anki.Vector.external_interface.ExternalInterface.ConnectCube:input_type -> Anki.Vector.external_interface.ConnectCubeRequest
	55,  // 55: Anki.Vector.external_interface.ExternalInterface.DisconnectCube:input_type -> Anki.Vector.external_interface.DisconnectCubeRequest
	56,  // 56: Anki.Vector.external_interface.ExternalInterface.CubesAvailable:input_type -> Anki.Vector.external_interface.CubesAvailableRequest
	57,  // 57: Anki.Vector.external_interface.ExternalInterface.FlashCubeLights:input_type -> Anki.Vector.external_interface.FlashCubeLightsRequest
	58,  // 58: Anki.Vector.external_interface.ExternalInterface.ForgetPreferredCube:input_type -> Anki.Vector.external_interface.ForgetPreferredCubeRequest
	59,  // 59: Anki.Vector.external_interface.ExternalInterface.SetPreferredCube:input_type -> Anki.Vector.external_interface.SetPreferredCubeRequest
	60,  // 60: Anki.Vector.external_interface.ExternalInterface.DeleteCustomObjects:input_type -> Anki.Vector.external_interface.DeleteCustomObjectsRequest
	61,  // 61: Anki.Vector.external_interface.ExternalInterface.CreateFixedCustomObject:input_type -> Anki.Vector.external_interface.CreateFixedCustomObjectRequest
	62,  // 62: Anki.Vector.external_interface.ExternalInterface.DefineCustomObject:input_type -> Anki.Vector.external_interface.DefineCustomObjectRequest
	63,  // 63: Anki.Vector.external_interface.ExternalInterface.SetCubeLights:input_type -> Anki.Vector.external_interface.SetCubeLightsRequest
	64,  // 64: Anki.Vector.external_interface.ExternalInterface.AudioFeed:input_type -> Anki.Vector.external_interface.AudioFeedRequest
	65,  // 65: Anki.Vector.external_interface.ExternalInterface.CameraFeed:input_type -> Anki.Vector.external_interface.CameraFeedRequest
	66,  // 66: Anki.Vector.external_interface.ExternalInterface.CaptureSingleImage:input_type -> Anki.Vector.external_interface.CaptureSingleImageRequest
	67,  // 67: Anki.Vector.external_interface.ExternalInterface.SetEyeColor:input_type -> Anki.Vector.external_interface.SetEyeColorRequest
	68,  // 68: Anki.Vector.external_interface.ExternalInterface.NavMapFeed:input_type -> Anki.Vector.external_interface.NavMapFeedRequest
	69,  // 69: Anki.Vector.external_interface.ExternalInterface.AppIntent:input_type -> Anki.Vector.external_interface.AppIntentRequest
	70,  // 70: Anki.Vector.external_interface.ExternalInterface.GetOnboardingState:input_type -> Anki.Vector.external_interface.OnboardingStateRequest
	71,  // 71: Anki.Vector.external_interface.ExternalInterface.SendOnboardingInput:input_type -> Anki.Vector.external_interface.OnboardingInputRequest
	72,  // 72: Anki.Vector.external_interface.ExternalInterface.GetLatestAttentionTransfer:input_type -> Anki.Vector.external_interface.LatestAttentionTransferRequest
	73,  // 73: Anki.Vector.external_interface.ExternalInterface.PullJdocs:input_type -> Anki.Vector.external_interface.PullJdocsRequest
	74,  // 74: Anki.Vector.external_interface.ExternalInterface.UpdateSettings:input_type -> Anki.Vector.external_interface.UpdateSettingsRequest
	75,  // 75: Anki.Vector.external_interface.ExternalInterface.UpdateAccountSettings:input_type -> Anki.Vector.external_interface.UpdateAccountSettingsRequest
	76,  // 76: Anki.Vector.external_interface.ExternalInterface.StartUpdateEngine:input_type -> Anki.Vector.external_interface.CheckUpdateStatusRequest
	76,  // 77: Anki.Vector.external_interface.ExternalInterface.CheckUpdateStatus:input_type -> Anki.Vector.external_interface.CheckUpdateStatusRequest
	77,  // 78: Anki.Vector.external_interface.ExternalInterface.UpdateAndRestart:input_type -> Anki.Vector.external_interface.UpdateAndRestartRequest
	78,  // 79: Anki.Vector.external_interface.ExternalInterface.CheckCloudConnection:input_type -> Anki.Vector.external_interface.CheckCloudRequest
	79,  // 80: Anki.Vector.external_interface.ExternalInterface.GetFeatureFlag:input_type -> Anki.Vector.external_interface.FeatureFlagRequest
	80,  // 81: Anki.Vector.external_interface.ExternalInterface.GetFeatureFlagList:input_type -> Anki.Vector.external_interface.FeatureFlagListRequest
	81,  // 82: Anki.Vector.external_interface.ExternalInterface.GetAlexaAuthState:input_type -> Anki.Vector.external_interface.AlexaAuthStateRequest
	82,  // 83: Anki.Vector.external_interface.ExternalInterface.AlexaOptIn:input_type -> Anki.Vector.external_interface.AlexaOptInRequest
	83,  // 84: Anki.Vector.external_interface.ExternalInterface.ProtocolVersion:output_type -> Anki.Vector.external_interface.ProtocolVersionResponse
	84,  // 85: Anki.Vector.external_interface.ExternalInterface.SDKInitialization:output_type -> Anki.Vector.external_interface.SDKInitializationResponse
	85,  // 86: Anki.Vector.external_interface.ExternalInterface.DriveWheels:output_type -> Anki.Vector.external_interface.DriveWheelsResponse
	86,  // 87: Anki.Vector.external_interface.ExternalInterface.PlayAnimationTrigger:output_type -> Anki.Vector.external_interface.PlayAnimationResponse
	86,  // 88: Anki.Vector.external_interface.ExternalInterface.PlayAnimation:output_type -> Anki.Vector.external_interface.PlayAnimationResponse
	87,  // 89: Anki.Vector.external_interface.ExternalInterface.ListAnimations:output_type -> Anki.Vector.external_interface.ListAnimationsResponse
	88,  // 90: Anki.Vector.external_interface.ExternalInterface.ListAnimationTriggers:output_type -> Anki.Vector.external_interface.ListAnimationTriggersResponse
	89,  // 91: Anki.Vector.external_interface.ExternalInterface.MoveHead:output_type -> Anki.Vector.external_interface.MoveHeadResponse
	90,  // 92: Anki.Vector.external_interface.ExternalInterface.MoveLift:output_type -> Anki.Vector.external_interface.MoveLiftResponse
	91,  // 93: Anki.Vector.external_interface.ExternalInterface.StopAllMotors:output_type -> Anki.Vector.external_interface.StopAllMotorsResponse
	92,  // 94: Anki.Vector.external_interface.ExternalInterface.DisplayFaceImageRGB:output_type -> Anki.Vector.external_interface.DisplayFaceImageRGBResponse
	93,  // 95: Anki.Vector.external_interface.ExternalInterface.EventStream:output_type -> Anki.Vector.external_interface.EventResponse
	94,  // 96: Anki.Vector.external_interface.ExternalInterface.ExternalAudioStreamPlayback:output_type -> Anki.Vector.external_interface.ExternalAudioStreamResponse
	95,  // 97: Anki.Vector.external_interface.ExternalInterface.BehaviorControl:output_type -> Anki.Vector.external_interface.BehaviorControlResponse
	95,  // 98: Anki.Vector.external_interface.ExternalInterface.AssumeBehaviorControl:output_type -> Anki.Vector.external_interface.BehaviorControlResponse
	96,  // 99: Anki.Vector.external_interface.ExternalInterface.CancelFaceEnrollment:output_type -> Anki.Vector.external_interface.CancelFaceEnrollmentResponse
	97,  // 100: Anki.Vector.external_interface.ExternalInterface.RequestEnrolledNames:output_type -> Anki.Vector.external_interface.RequestEnrolledNamesResponse
	98,  // 101: Anki.Vector.external_interface.ExternalInterface.UpdateEnrolledFaceByID:output_type -> Anki.Vector.external_interface.UpdateEnrolledFaceByIDResponse
	99,  // 102: Anki.Vector.external_interface.ExternalInterface.EraseEnrolledFaceByID:output_type -> Anki.Vector.external_interface.EraseEnrolledFaceByIDResponse
	100, // 103: Anki.Vector.external_interface.ExternalInterface.EraseAllEnrolledFaces:output_type -> Anki.Vector.external_interface.EraseAllEnrolledFacesResponse
	101, // 104: Anki.Vector.external_interface.ExternalInterface.SetFaceToEnroll:output_type -> Anki.Vector.external_interface.SetFaceToEnrollResponse
	102, // 105: Anki.Vector.external_interface.ExternalInterface.EnableMarkerDetection:output_type -> Anki.Vector.external_interface.EnableMarkerDetectionResponse
	103, // 106: Anki.Vector.external_interface.ExternalInterface.EnableFaceDetection:output_type -> Anki.Vector.external_interface.EnableFaceDetectionResponse
	104, // 107: Anki.Vector.external_interface.ExternalInterface.EnableMotionDetection:output_type -> Anki.Vector.external_interface.EnableMotionDetectionResponse
	105, // 108: Anki.Vector.external_interface.ExternalInterface.EnableMirrorMode:output_type -> Anki.Vector.external_interface.EnableMirrorModeResponse
	106, // 109: Anki.Vector.external_interface.ExternalInterface.EnableImageStreaming:output_type -> Anki.Vector.external_interface.EnableImageStreamingResponse
	107, // 110: Anki.Vector.external_interface.ExternalInterface.IsImageStreamingEnabled:output_type -> Anki.Vector.external_interface.IsImageStreamingEnabledResponse
	108, // 111: Anki.Vector.external_interface.ExternalInterface.CancelActionByIdTag:output_type -> Anki.Vector.external_interface.CancelActionByIdTagResponse
	109, // 112: Anki.Vector.external_interface.ExternalInterface.GoToPose:output_type -> Anki.Vector.external_interface.GoToPoseResponse
	110, // 113: Anki.Vector.external_interface.ExternalInterface.DockWithCube:output_type -> Anki.Vector.external_interface.DockWithCubeResponse
	111, // 114: Anki.Vector.external_interface.ExternalInterface.DriveOffCharger:output_type -> Anki.Vector.external_interface.DriveOffChargerResponse
	112, // 115: Anki.Vector.external_interface.ExternalInterface.DriveOnCharger:output_type -> Anki.Vector.external_interface.DriveOnChargerResponse
	113, // 116: Anki.Vector.external_interface.ExternalInterface.FindFaces:output_type -> Anki.Vector.external_interface.FindFacesResponse
	114, // 117: Anki.Vector.external_interface.ExternalInterface.LookAroundInPlace:output_type -> Anki.Vector.external_interface.LookAroundInPlaceResponse
	115, // 118: Anki.Vector.external_interface.ExternalInterface.RollBlock:output_type -> Anki.Vector.external_interface.RollBlockResponse
	116, // 119: Anki.Vector.external_interface.ExternalInterface.PhotosInfo:output_type -> Anki.Vector.external_interface.PhotosInfoResponse
	117, // 120: Anki.Vector.external_interface.ExternalInterface.Photo:output_type -> Anki.Vector.external_interface.PhotoResponse
	118, // 121: Anki.Vector.external_interface.ExternalInterface.Thumbnail:output_type -> Anki.Vector.external_interface.ThumbnailResponse
	119, // 122: Anki.Vector.external_interface.ExternalInterface.DeletePhoto:output_type -> Anki.Vector.external_interface.DeletePhotoResponse
	120, // 123: Anki.Vector.external_interface.ExternalInterface.DriveStraight:output_type -> Anki.Vector.external_interface.DriveStraightResponse
	121, // 124: Anki.Vector.external_interface.ExternalInterface.TurnInPlace:output_type -> Anki.Vector.external_interface.TurnInPlaceResponse
	122, // 125: Anki.Vector.external_interface.ExternalInterface.SetHeadAngle:output_type -> Anki.Vector.external_interface.SetHeadAngleResponse
	123, // 126: Anki.Vector.external_interface.ExternalInterface.SetLiftHeight:output_type -> Anki.Vector.external_interface.SetLiftHeightResponse
	124, // 127: Anki.Vector.external_interface.ExternalInterface.TurnTowardsFace:output_type -> Anki.Vector.external_interface.TurnTowardsFaceResponse
	125, // 128: Anki.Vector.external_interface.ExternalInterface.GoToObject:output_type -> Anki.Vector.external_interface.GoToObjectResponse
	126, // 129: Anki.Vector.external_interface.ExternalInterface.RollObject:output_type -> Anki.Vector.external_interface.RollObjectResponse
	127, // 130: Anki.Vector.external_interface.ExternalInterface.PopAWheelie:output_type -> Anki.Vector.external_interface.PopAWheelieResponse
	128, // 131: Anki.Vector.external_interface.ExternalInterface.PickupObject:output_type -> Anki.Vector.external_interface.PickupObjectResponse
	129, // 132: Anki.Vector.external_interface.ExternalInterface.PlaceObjectOnGroundHere:output_type -> Anki.Vector.external_interface.PlaceObjectOnGroundHereResponse
	130, // 133: Anki.Vector.external_interface.ExternalInterface.SetMasterVolume:output_type -> Anki.Vector.external_interface.MasterVolumeResponse
	131, // 134: Anki.Vector.external_interface.ExternalInterface.UserAuthentication:output_type -> Anki.Vector.external_interface.UserAuthenticationResponse
	132, // 135: Anki.Vector.external_interface.ExternalInterface.BatteryState:output_type -> Anki.Vector.external_interface.BatteryStateResponse
	133, // 136: Anki.Vector.external_interface.ExternalInterface.VersionState:output_type -> Anki.Vector.external_interface.VersionStateResponse
	134, // 137: Anki.Vector.external_interface.ExternalInterface.SayText:output_type -> Anki.Vector.external_interface.SayTextResponse
	135, // 138: Anki.Vector.external_interface.ExternalInterface.ConnectCube:output_type -> Anki.Vector.external_interface.ConnectCubeResponse
	136, // 139: Anki.Vector.external_interface.ExternalInterface.DisconnectCube:output_type -> Anki.Vector.external_interface.DisconnectCubeResponse
	137, // 140: Anki.Vector.external_interface.ExternalInterface.CubesAvailable:output_type -> Anki.Vector.external_interface.CubesAvailableResponse
	138, // 141: Anki.Vector.external_interface.ExternalInterface.FlashCubeLights:output_type -> Anki.Vector.external_interface.FlashCubeLightsResponse
	139, // 142: Anki.Vector.external_interface.ExternalInterface.ForgetPreferredCube:output_type -> Anki.Vector.external_interface.ForgetPreferredCubeResponse
	140, // 143: Anki.Vector.external_interface.ExternalInterface.SetPreferredCube:output_type -> Anki.Vector.external_interface.SetPreferredCubeResponse
	141, // 144: Anki.Vector.external_interface.ExternalInterface.DeleteCustomObjects:output_type -> Anki.Vector.external_interface.DeleteCustomObjectsResponse
	142, // 145: Anki.Vector.external_interface.ExternalInterface.CreateFixedCustomObject:output_type -> Anki.Vector.external_interface.CreateFixedCustomObjectResponse
	143, // 146: Anki.Vector.external_interface.ExternalInterface.DefineCustomObject:output_type -> Anki.Vector.external_interface.DefineCustomObjectResponse
	144, // 147: Anki.Vector.external_interface.ExternalInterface.SetCubeLights:output_type -> Anki.Vector.external_interface.SetCubeLightsResponse
	145, // 148: Anki.Vector.external_interface.ExternalInterface.AudioFeed:output_type -> Anki.Vector.external_interface.AudioFeedResponse
	146, // 149: Anki.Vector.external_interface.ExternalInterface.CameraFeed:output_type -> Anki.Vector.external_interface.CameraFeedResponse
	147, // 150: Anki.Vector.external_interface.ExternalInterface.CaptureSingleImage:output_type -> Anki.Vector.external_interface.CaptureSingleImageResponse
	148, // 151: Anki.Vector.external_interface.ExternalInterface.SetEyeColor:output_type -> Anki.Vector.external_interface.SetEyeColorResponse
	149, // 152: Anki.Vector.external_interface.ExternalInterface.NavMapFeed:output_type -> Anki.Vector.external_interface.NavMapFeedResponse
	150, // 153: Anki.Vector.external_interface.ExternalInterface.AppIntent:output_type -> Anki.Vector.external_interface.AppIntentResponse
	151, // 154: Anki.Vector.external_interface.ExternalInterface.GetOnboardingState:output_type -> Anki.Vector.external_interface.OnboardingStateResponse
	152, // 155: Anki.Vector.external_interface.ExternalInterface.SendOnboardingInput:output_type -> Anki.Vector.external_interface.OnboardingInputResponse
	153, // 156: Anki.Vector.external_interface.ExternalInterface.GetLatestAttentionTransfer:output_type -> Anki.Vector.external_interface.LatestAttentionTransferResponse
	154, // 157: Anki.Vector.external_interface.ExternalInterface.PullJdocs:output_type -> Anki.Vector.external_interface.PullJdocsResponse
	155, // 158: Anki.Vector.external_interface.ExternalInterface.UpdateSettings:output_type -> Anki.Vector.external_interface.UpdateSettingsResponse
	156, // 159: Anki.Vector.external_interface.ExternalInterface.UpdateAccountSettings:output_type -> Anki.Vector.external_interface.UpdateAccountSettingsResponse
	157, // 160: Anki.Vector.external_interface.ExternalInterface.StartUpdateEngine:output_type -> Anki.Vector.external_interface.CheckUpdateStatusResponse
	157, // 161: Anki.Vector.external_interface.ExternalInterface.CheckUpdateStatus:output_type -> Anki.Vector.external_interface.CheckUpdateStatusResponse
	158, // 162: Anki.Vector.external_interface.ExternalInterface.UpdateAndRestart:output_type -> Anki.Vector.external_interface.UpdateAndRestartResponse
	159, // 163: Anki.Vector.external_interface.ExternalInterface.CheckCloudConnection:output_type -> Anki.Vector.external_interface.CheckCloudResponse
	160, // 164: Anki.Vector.external_interface.ExternalInterface.GetFeatureFlag:output_type -> Anki.Vector.external_interface.FeatureFlagResponse
	161, // 165: Anki.Vector.external_interface.ExternalInterface.GetFeatureFlagList:output_type -> Anki.Vector.external_interface.FeatureFlagListResponse
	162, // 166: Anki.Vector.external_interface.ExternalInterface.GetAlexaAuthState:output_type -> Anki.Vector.external_interface.AlexaAuthStateResponse
	163, // 167: Anki.Vector.external_interface.ExternalInterface.AlexaOptIn:output_type -> Anki.Vector.external_interface.AlexaOptInResponse
	84,  // [84:168] is the sub-list for method output_type
	0,   // [0:84] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_external_interface_proto_init() }
func file_external_interface_proto_init() {
	if File_external_interface_proto != nil {
		return
	}
	file_alexa_proto_init()
	file_behavior_proto_init()
	file_cube_proto_init()
	file_messages_proto_init()
	file_nav_map_proto_init()
	file_settings_proto_init()
	file_shared_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_interface_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_interface_proto_goTypes,
		DependencyIndexes: file_external_interface_proto_depIdxs,
		EnumInfos:         file_external_interface_proto_enumTypes,
	}.Build()
	File_external_interface_proto = out.File
	file_external_interface_proto_rawDesc = nil
	file_external_interface_proto_goTypes = nil
	file_external_interface_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExternalInterfaceClient is the client API for ExternalInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExternalInterfaceClient interface {
	// Checks the supported protocol version by passing in the client version and
	// minimum host version and receiving a response to see whether the versions are supported.
	ProtocolVersion(ctx context.Context, in *ProtocolVersionRequest, opts ...grpc.CallOption) (*ProtocolVersionResponse, error)
	// SDK-only message to pass version info for device OS, Python version, etc.
	SDKInitialization(ctx context.Context, in *SDKInitializationRequest, opts ...grpc.CallOption) (*SDKInitializationResponse, error)
	// Sets the speed and acceleration for Vector's wheel motors.
	DriveWheels(ctx context.Context, in *DriveWheelsRequest, opts ...grpc.CallOption) (*DriveWheelsResponse, error)
	// Requests that Vector play an animation trigger.
	PlayAnimationTrigger(ctx context.Context, in *PlayAnimationTriggerRequest, opts ...grpc.CallOption) (*PlayAnimationResponse, error)
	// Requests that Vector play an animation.
	PlayAnimation(ctx context.Context, in *PlayAnimationRequest, opts ...grpc.CallOption) (*PlayAnimationResponse, error)
	// Constructs and returns a list of animations.
	ListAnimations(ctx context.Context, in *ListAnimationsRequest, opts ...grpc.CallOption) (*ListAnimationsResponse, error)
	// Constructs and returns a list of animation triggers.
	ListAnimationTriggers(ctx context.Context, in *ListAnimationTriggersRequest, opts ...grpc.CallOption) (*ListAnimationTriggersResponse, error)
	// Moves Vector's head.
	MoveHead(ctx context.Context, in *MoveHeadRequest, opts ...grpc.CallOption) (*MoveHeadResponse, error)
	// Moves Vector's lift.
	MoveLift(ctx context.Context, in *MoveLiftRequest, opts ...grpc.CallOption) (*MoveLiftResponse, error)
	// Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
	StopAllMotors(ctx context.Context, in *StopAllMotorsRequest, opts ...grpc.CallOption) (*StopAllMotorsResponse, error)
	// Sets screen (Vector's face) to a solid color.
	DisplayFaceImageRGB(ctx context.Context, in *DisplayFaceImageRGBRequest, opts ...grpc.CallOption) (*DisplayFaceImageRGBResponse, error)
	// Streaming events endpoint
	EventStream(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (ExternalInterface_EventStreamClient, error)
	// Play audio using Vector's speaker
	ExternalAudioStreamPlayback(ctx context.Context, opts ...grpc.CallOption) (ExternalInterface_ExternalAudioStreamPlaybackClient, error)
	// Integrate with and acquire control of Vector's AI system.
	BehaviorControl(ctx context.Context, opts ...grpc.CallOption) (ExternalInterface_BehaviorControlClient, error)
	// Acquire control of Vector's AI system.
	AssumeBehaviorControl(ctx context.Context, in *BehaviorControlRequest, opts ...grpc.CallOption) (ExternalInterface_AssumeBehaviorControlClient, error)
	CancelFaceEnrollment(ctx context.Context, in *CancelFaceEnrollmentRequest, opts ...grpc.CallOption) (*CancelFaceEnrollmentResponse, error)
	// Get a list of names and their IDs.
	RequestEnrolledNames(ctx context.Context, in *RequestEnrolledNamesRequest, opts ...grpc.CallOption) (*RequestEnrolledNamesResponse, error)
	// Update the name enrolled for a given face.
	UpdateEnrolledFaceByID(ctx context.Context, in *UpdateEnrolledFaceByIDRequest, opts ...grpc.CallOption) (*UpdateEnrolledFaceByIDResponse, error)
	// Erase the enrollment (name) record for the face with this ID.
	EraseEnrolledFaceByID(ctx context.Context, in *EraseEnrolledFaceByIDRequest, opts ...grpc.CallOption) (*EraseEnrolledFaceByIDResponse, error)
	// Erase the enrollment (name) records for all faces.
	EraseAllEnrolledFaces(ctx context.Context, in *EraseAllEnrolledFacesRequest, opts ...grpc.CallOption) (*EraseAllEnrolledFacesResponse, error)
	SetFaceToEnroll(ctx context.Context, in *SetFaceToEnrollRequest, opts ...grpc.CallOption) (*SetFaceToEnrollResponse, error)
	EnableMarkerDetection(ctx context.Context, in *EnableMarkerDetectionRequest, opts ...grpc.CallOption) (*EnableMarkerDetectionResponse, error)
	EnableFaceDetection(ctx context.Context, in *EnableFaceDetectionRequest, opts ...grpc.CallOption) (*EnableFaceDetectionResponse, error)
	EnableMotionDetection(ctx context.Context, in *EnableMotionDetectionRequest, opts ...grpc.CallOption) (*EnableMotionDetectionResponse, error)
	EnableMirrorMode(ctx context.Context, in *EnableMirrorModeRequest, opts ...grpc.CallOption) (*EnableMirrorModeResponse, error)
	EnableImageStreaming(ctx context.Context, in *EnableImageStreamingRequest, opts ...grpc.CallOption) (*EnableImageStreamingResponse, error)
	IsImageStreamingEnabled(ctx context.Context, in *IsImageStreamingEnabledRequest, opts ...grpc.CallOption) (*IsImageStreamingEnabledResponse, error)
	// Cancel action by id
	CancelActionByIdTag(ctx context.Context, in *CancelActionByIdTagRequest, opts ...grpc.CallOption) (*CancelActionByIdTagResponse, error)
	// Tells Vector to drive to the specified pose and orientation.
	GoToPose(ctx context.Context, in *GoToPoseRequest, opts ...grpc.CallOption) (*GoToPoseResponse, error)
	// Tells Vector to dock with a light cube with a given approach angle and distance.
	DockWithCube(ctx context.Context, in *DockWithCubeRequest, opts ...grpc.CallOption) (*DockWithCubeResponse, error)
	// Drive Vector off the charger.
	DriveOffCharger(ctx context.Context, in *DriveOffChargerRequest, opts ...grpc.CallOption) (*DriveOffChargerResponse, error)
	// Drive Vector onto the charger.
	DriveOnCharger(ctx context.Context, in *DriveOnChargerRequest, opts ...grpc.CallOption) (*DriveOnChargerResponse, error)
	// Make Vector look for faces by turning and angling his head
	FindFaces(ctx context.Context, in *FindFacesRequest, opts ...grpc.CallOption) (*FindFacesResponse, error)
	// Make Vector look around in place by turning and moving his head
	LookAroundInPlace(ctx context.Context, in *LookAroundInPlaceRequest, opts ...grpc.CallOption) (*LookAroundInPlaceResponse, error)
	// Make Vector roll his block, regardless of relative position and orientation
	RollBlock(ctx context.Context, in *RollBlockRequest, opts ...grpc.CallOption) (*RollBlockResponse, error)
	// Get the photos info.
	PhotosInfo(ctx context.Context, in *PhotosInfoRequest, opts ...grpc.CallOption) (*PhotosInfoResponse, error)
	// Get a photo by ID.
	Photo(ctx context.Context, in *PhotoRequest, opts ...grpc.CallOption) (*PhotoResponse, error)
	// Get a thumbnail by ID.
	Thumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error)
	// Delete a photo by ID.
	DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoResponse, error)
	// Tells Vector to drive in a straight line.
	DriveStraight(ctx context.Context, in *DriveStraightRequest, opts ...grpc.CallOption) (*DriveStraightResponse, error)
	// Turn the robot around its current position.
	TurnInPlace(ctx context.Context, in *TurnInPlaceRequest, opts ...grpc.CallOption) (*TurnInPlaceResponse, error)
	// Tell Vector's head to move to a given angle.
	SetHeadAngle(ctx context.Context, in *SetHeadAngleRequest, opts ...grpc.CallOption) (*SetHeadAngleResponse, error)
	// Tell Vector's lift to move to a given height.
	SetLiftHeight(ctx context.Context, in *SetLiftHeightRequest, opts ...grpc.CallOption) (*SetLiftHeightResponse, error)
	// Tell Vector to turn towards this face.
	TurnTowardsFace(ctx context.Context, in *TurnTowardsFaceRequest, opts ...grpc.CallOption) (*TurnTowardsFaceResponse, error)
	// Tell Vector to drive to the specified object.
	GoToObject(ctx context.Context, in *GoToObjectRequest, opts ...grpc.CallOption) (*GoToObjectResponse, error)
	// Tell Vector to roll his cube.
	RollObject(ctx context.Context, in *RollObjectRequest, opts ...grpc.CallOption) (*RollObjectResponse, error)
	// Tell Vector to "pop a wheelie" using his cube.
	PopAWheelie(ctx context.Context, in *PopAWheelieRequest, opts ...grpc.CallOption) (*PopAWheelieResponse, error)
	// Instruct the robot to pick up the supplied object.
	PickupObject(ctx context.Context, in *PickupObjectRequest, opts ...grpc.CallOption) (*PickupObjectResponse, error)
	// Ask Vector to place the object he is carrying on the ground at the current location.
	PlaceObjectOnGroundHere(ctx context.Context, in *PlaceObjectOnGroundHereRequest, opts ...grpc.CallOption) (*PlaceObjectOnGroundHereResponse, error)
	// Set the Robot's master volume
	SetMasterVolume(ctx context.Context, in *MasterVolumeRequest, opts ...grpc.CallOption) (*MasterVolumeResponse, error)
	UserAuthentication(ctx context.Context, in *UserAuthenticationRequest, opts ...grpc.CallOption) (*UserAuthenticationResponse, error)
	// Check the current state of the battery.
	BatteryState(ctx context.Context, in *BatteryStateRequest, opts ...grpc.CallOption) (*BatteryStateResponse, error)
	// Get the versioning information for Vector.
	VersionState(ctx context.Context, in *VersionStateRequest, opts ...grpc.CallOption) (*VersionStateResponse, error)
	// Make Vector speak text.
	SayText(ctx context.Context, in *SayTextRequest, opts ...grpc.CallOption) (*SayTextResponse, error)
	// Attempt to connect to a cube. If a cube is currently connected,
	// this will do nothing.
	ConnectCube(ctx context.Context, in *ConnectCubeRequest, opts ...grpc.CallOption) (*ConnectCubeResponse, error)
	// Requests a disconnection from the currently connected cube.
	DisconnectCube(ctx context.Context, in *DisconnectCubeRequest, opts ...grpc.CallOption) (*DisconnectCubeResponse, error)
	CubesAvailable(ctx context.Context, in *CubesAvailableRequest, opts ...grpc.CallOption) (*CubesAvailableResponse, error)
	// Signal a connected cube to flash its lights using the default cube
	// flash animation.
	FlashCubeLights(ctx context.Context, in *FlashCubeLightsRequest, opts ...grpc.CallOption) (*FlashCubeLightsResponse, error)
	// Forget the robot's preferred cube. This will cause the robot to
	// connect to the cube with the highest RSSI (signal strength) next
	// time a connection is requested. Saves this preference to disk.
	// The next cube that the robot connects to will become its
	// preferred cube.
	ForgetPreferredCube(ctx context.Context, in *ForgetPreferredCubeRequest, opts ...grpc.CallOption) (*ForgetPreferredCubeResponse, error)
	// Set the robot's preferred cube and save it to disk. The robot
	// will always attempt to connect to this cube if it is available.
	// This is only used in simulation for now.
	SetPreferredCube(ctx context.Context, in *SetPreferredCubeRequest, opts ...grpc.CallOption) (*SetPreferredCubeResponse, error)
	// Causes the robot to forget about custom objects it currently knows about.
	DeleteCustomObjects(ctx context.Context, in *DeleteCustomObjectsRequest, opts ...grpc.CallOption) (*DeleteCustomObjectsResponse, error)
	// Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
	CreateFixedCustomObject(ctx context.Context, in *CreateFixedCustomObjectRequest, opts ...grpc.CallOption) (*CreateFixedCustomObjectResponse, error)
	// Creates a custom object with distinct custom marker(s).
	DefineCustomObject(ctx context.Context, in *DefineCustomObjectRequest, opts ...grpc.CallOption) (*DefineCustomObjectResponse, error)
	// Set each of the lights on the currently connected cube based on two
	// rgb values each and timing data for how to transition between them.
	SetCubeLights(ctx context.Context, in *SetCubeLightsRequest, opts ...grpc.CallOption) (*SetCubeLightsResponse, error)
	// Request an audio feed from the robot.
	AudioFeed(ctx context.Context, in *AudioFeedRequest, opts ...grpc.CallOption) (ExternalInterface_AudioFeedClient, error)
	// Request a camera feed from the robot.
	CameraFeed(ctx context.Context, in *CameraFeedRequest, opts ...grpc.CallOption) (ExternalInterface_CameraFeedClient, error)
	// Request a single image to be captured and sent from the robot.
	CaptureSingleImage(ctx context.Context, in *CaptureSingleImageRequest, opts ...grpc.CallOption) (*CaptureSingleImageResponse, error)
	// Set Vector's eye color.
	SetEyeColor(ctx context.Context, in *SetEyeColorRequest, opts ...grpc.CallOption) (*SetEyeColorResponse, error)
	// Stream navigation map data.
	NavMapFeed(ctx context.Context, in *NavMapFeedRequest, opts ...grpc.CallOption) (ExternalInterface_NavMapFeedClient, error)
	AppIntent(ctx context.Context, in *AppIntentRequest, opts ...grpc.CallOption) (*AppIntentResponse, error)
	GetOnboardingState(ctx context.Context, in *OnboardingStateRequest, opts ...grpc.CallOption) (*OnboardingStateResponse, error)
	SendOnboardingInput(ctx context.Context, in *OnboardingInputRequest, opts ...grpc.CallOption) (*OnboardingInputResponse, error)
	GetLatestAttentionTransfer(ctx context.Context, in *LatestAttentionTransferRequest, opts ...grpc.CallOption) (*LatestAttentionTransferResponse, error)
	PullJdocs(ctx context.Context, in *PullJdocsRequest, opts ...grpc.CallOption) (*PullJdocsResponse, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	UpdateAccountSettings(ctx context.Context, in *UpdateAccountSettingsRequest, opts ...grpc.CallOption) (*UpdateAccountSettingsResponse, error)
	// StartUpdateEngine cycles the update-engine service (to start a new check for an update) and sets up a stream of
	// UpdateStatusResponse Events.
	StartUpdateEngine(ctx context.Context, in *CheckUpdateStatusRequest, opts ...grpc.CallOption) (*CheckUpdateStatusResponse, error)
	// CheckUpdateStatus tells if the robot is ready to reboot and update.
	CheckUpdateStatus(ctx context.Context, in *CheckUpdateStatusRequest, opts ...grpc.CallOption) (*CheckUpdateStatusResponse, error)
	UpdateAndRestart(ctx context.Context, in *UpdateAndRestartRequest, opts ...grpc.CallOption) (*UpdateAndRestartResponse, error)
	CheckCloudConnection(ctx context.Context, in *CheckCloudRequest, opts ...grpc.CallOption) (*CheckCloudResponse, error)
	GetFeatureFlag(ctx context.Context, in *FeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagResponse, error)
	GetFeatureFlagList(ctx context.Context, in *FeatureFlagListRequest, opts ...grpc.CallOption) (*FeatureFlagListResponse, error)
	GetAlexaAuthState(ctx context.Context, in *AlexaAuthStateRequest, opts ...grpc.CallOption) (*AlexaAuthStateResponse, error)
	AlexaOptIn(ctx context.Context, in *AlexaOptInRequest, opts ...grpc.CallOption) (*AlexaOptInResponse, error)
}

type externalInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalInterfaceClient(cc grpc.ClientConnInterface) ExternalInterfaceClient {
	return &externalInterfaceClient{cc}
}

func (c *externalInterfaceClient) ProtocolVersion(ctx context.Context, in *ProtocolVersionRequest, opts ...grpc.CallOption) (*ProtocolVersionResponse, error) {
	out := new(ProtocolVersionResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/ProtocolVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SDKInitialization(ctx context.Context, in *SDKInitializationRequest, opts ...grpc.CallOption) (*SDKInitializationResponse, error) {
	out := new(SDKInitializationResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SDKInitialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DriveWheels(ctx context.Context, in *DriveWheelsRequest, opts ...grpc.CallOption) (*DriveWheelsResponse, error) {
	out := new(DriveWheelsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DriveWheels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) PlayAnimationTrigger(ctx context.Context, in *PlayAnimationTriggerRequest, opts ...grpc.CallOption) (*PlayAnimationResponse, error) {
	out := new(PlayAnimationResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/PlayAnimationTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) PlayAnimation(ctx context.Context, in *PlayAnimationRequest, opts ...grpc.CallOption) (*PlayAnimationResponse, error) {
	out := new(PlayAnimationResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/PlayAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) ListAnimations(ctx context.Context, in *ListAnimationsRequest, opts ...grpc.CallOption) (*ListAnimationsResponse, error) {
	out := new(ListAnimationsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/ListAnimations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) ListAnimationTriggers(ctx context.Context, in *ListAnimationTriggersRequest, opts ...grpc.CallOption) (*ListAnimationTriggersResponse, error) {
	out := new(ListAnimationTriggersResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/ListAnimationTriggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) MoveHead(ctx context.Context, in *MoveHeadRequest, opts ...grpc.CallOption) (*MoveHeadResponse, error) {
	out := new(MoveHeadResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/MoveHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) MoveLift(ctx context.Context, in *MoveLiftRequest, opts ...grpc.CallOption) (*MoveLiftResponse, error) {
	out := new(MoveLiftResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/MoveLift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) StopAllMotors(ctx context.Context, in *StopAllMotorsRequest, opts ...grpc.CallOption) (*StopAllMotorsResponse, error) {
	out := new(StopAllMotorsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/StopAllMotors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DisplayFaceImageRGB(ctx context.Context, in *DisplayFaceImageRGBRequest, opts ...grpc.CallOption) (*DisplayFaceImageRGBResponse, error) {
	out := new(DisplayFaceImageRGBResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DisplayFaceImageRGB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) EventStream(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (ExternalInterface_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExternalInterface_serviceDesc.Streams[0], "/Anki.Vector.external_interface.ExternalInterface/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalInterfaceEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExternalInterface_EventStreamClient interface {
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type externalInterfaceEventStreamClient struct {
	grpc.ClientStream
}

func (x *externalInterfaceEventStreamClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalInterfaceClient) ExternalAudioStreamPlayback(ctx context.Context, opts ...grpc.CallOption) (ExternalInterface_ExternalAudioStreamPlaybackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExternalInterface_serviceDesc.Streams[1], "/Anki.Vector.external_interface.ExternalInterface/ExternalAudioStreamPlayback", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalInterfaceExternalAudioStreamPlaybackClient{stream}
	return x, nil
}

type ExternalInterface_ExternalAudioStreamPlaybackClient interface {
	Send(*ExternalAudioStreamRequest) error
	Recv() (*ExternalAudioStreamResponse, error)
	grpc.ClientStream
}

type externalInterfaceExternalAudioStreamPlaybackClient struct {
	grpc.ClientStream
}

func (x *externalInterfaceExternalAudioStreamPlaybackClient) Send(m *ExternalAudioStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *externalInterfaceExternalAudioStreamPlaybackClient) Recv() (*ExternalAudioStreamResponse, error) {
	m := new(ExternalAudioStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalInterfaceClient) BehaviorControl(ctx context.Context, opts ...grpc.CallOption) (ExternalInterface_BehaviorControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExternalInterface_serviceDesc.Streams[2], "/Anki.Vector.external_interface.ExternalInterface/BehaviorControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalInterfaceBehaviorControlClient{stream}
	return x, nil
}

type ExternalInterface_BehaviorControlClient interface {
	Send(*BehaviorControlRequest) error
	Recv() (*BehaviorControlResponse, error)
	grpc.ClientStream
}

type externalInterfaceBehaviorControlClient struct {
	grpc.ClientStream
}

func (x *externalInterfaceBehaviorControlClient) Send(m *BehaviorControlRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *externalInterfaceBehaviorControlClient) Recv() (*BehaviorControlResponse, error) {
	m := new(BehaviorControlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalInterfaceClient) AssumeBehaviorControl(ctx context.Context, in *BehaviorControlRequest, opts ...grpc.CallOption) (ExternalInterface_AssumeBehaviorControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExternalInterface_serviceDesc.Streams[3], "/Anki.Vector.external_interface.ExternalInterface/AssumeBehaviorControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalInterfaceAssumeBehaviorControlClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExternalInterface_AssumeBehaviorControlClient interface {
	Recv() (*BehaviorControlResponse, error)
	grpc.ClientStream
}

type externalInterfaceAssumeBehaviorControlClient struct {
	grpc.ClientStream
}

func (x *externalInterfaceAssumeBehaviorControlClient) Recv() (*BehaviorControlResponse, error) {
	m := new(BehaviorControlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalInterfaceClient) CancelFaceEnrollment(ctx context.Context, in *CancelFaceEnrollmentRequest, opts ...grpc.CallOption) (*CancelFaceEnrollmentResponse, error) {
	out := new(CancelFaceEnrollmentResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/CancelFaceEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) RequestEnrolledNames(ctx context.Context, in *RequestEnrolledNamesRequest, opts ...grpc.CallOption) (*RequestEnrolledNamesResponse, error) {
	out := new(RequestEnrolledNamesResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/RequestEnrolledNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) UpdateEnrolledFaceByID(ctx context.Context, in *UpdateEnrolledFaceByIDRequest, opts ...grpc.CallOption) (*UpdateEnrolledFaceByIDResponse, error) {
	out := new(UpdateEnrolledFaceByIDResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/UpdateEnrolledFaceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) EraseEnrolledFaceByID(ctx context.Context, in *EraseEnrolledFaceByIDRequest, opts ...grpc.CallOption) (*EraseEnrolledFaceByIDResponse, error) {
	out := new(EraseEnrolledFaceByIDResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/EraseEnrolledFaceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) EraseAllEnrolledFaces(ctx context.Context, in *EraseAllEnrolledFacesRequest, opts ...grpc.CallOption) (*EraseAllEnrolledFacesResponse, error) {
	out := new(EraseAllEnrolledFacesResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/EraseAllEnrolledFaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SetFaceToEnroll(ctx context.Context, in *SetFaceToEnrollRequest, opts ...grpc.CallOption) (*SetFaceToEnrollResponse, error) {
	out := new(SetFaceToEnrollResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SetFaceToEnroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) EnableMarkerDetection(ctx context.Context, in *EnableMarkerDetectionRequest, opts ...grpc.CallOption) (*EnableMarkerDetectionResponse, error) {
	out := new(EnableMarkerDetectionResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/EnableMarkerDetection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) EnableFaceDetection(ctx context.Context, in *EnableFaceDetectionRequest, opts ...grpc.CallOption) (*EnableFaceDetectionResponse, error) {
	out := new(EnableFaceDetectionResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/EnableFaceDetection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) EnableMotionDetection(ctx context.Context, in *EnableMotionDetectionRequest, opts ...grpc.CallOption) (*EnableMotionDetectionResponse, error) {
	out := new(EnableMotionDetectionResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/EnableMotionDetection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) EnableMirrorMode(ctx context.Context, in *EnableMirrorModeRequest, opts ...grpc.CallOption) (*EnableMirrorModeResponse, error) {
	out := new(EnableMirrorModeResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/EnableMirrorMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) EnableImageStreaming(ctx context.Context, in *EnableImageStreamingRequest, opts ...grpc.CallOption) (*EnableImageStreamingResponse, error) {
	out := new(EnableImageStreamingResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/EnableImageStreaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) IsImageStreamingEnabled(ctx context.Context, in *IsImageStreamingEnabledRequest, opts ...grpc.CallOption) (*IsImageStreamingEnabledResponse, error) {
	out := new(IsImageStreamingEnabledResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/IsImageStreamingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) CancelActionByIdTag(ctx context.Context, in *CancelActionByIdTagRequest, opts ...grpc.CallOption) (*CancelActionByIdTagResponse, error) {
	out := new(CancelActionByIdTagResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/CancelActionByIdTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) GoToPose(ctx context.Context, in *GoToPoseRequest, opts ...grpc.CallOption) (*GoToPoseResponse, error) {
	out := new(GoToPoseResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/GoToPose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DockWithCube(ctx context.Context, in *DockWithCubeRequest, opts ...grpc.CallOption) (*DockWithCubeResponse, error) {
	out := new(DockWithCubeResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DockWithCube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DriveOffCharger(ctx context.Context, in *DriveOffChargerRequest, opts ...grpc.CallOption) (*DriveOffChargerResponse, error) {
	out := new(DriveOffChargerResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DriveOffCharger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DriveOnCharger(ctx context.Context, in *DriveOnChargerRequest, opts ...grpc.CallOption) (*DriveOnChargerResponse, error) {
	out := new(DriveOnChargerResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DriveOnCharger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) FindFaces(ctx context.Context, in *FindFacesRequest, opts ...grpc.CallOption) (*FindFacesResponse, error) {
	out := new(FindFacesResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/FindFaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) LookAroundInPlace(ctx context.Context, in *LookAroundInPlaceRequest, opts ...grpc.CallOption) (*LookAroundInPlaceResponse, error) {
	out := new(LookAroundInPlaceResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/LookAroundInPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) RollBlock(ctx context.Context, in *RollBlockRequest, opts ...grpc.CallOption) (*RollBlockResponse, error) {
	out := new(RollBlockResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/RollBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) PhotosInfo(ctx context.Context, in *PhotosInfoRequest, opts ...grpc.CallOption) (*PhotosInfoResponse, error) {
	out := new(PhotosInfoResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/PhotosInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) Photo(ctx context.Context, in *PhotoRequest, opts ...grpc.CallOption) (*PhotoResponse, error) {
	out := new(PhotoResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/Photo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) Thumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error) {
	out := new(ThumbnailResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/Thumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoResponse, error) {
	out := new(DeletePhotoResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DeletePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DriveStraight(ctx context.Context, in *DriveStraightRequest, opts ...grpc.CallOption) (*DriveStraightResponse, error) {
	out := new(DriveStraightResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DriveStraight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) TurnInPlace(ctx context.Context, in *TurnInPlaceRequest, opts ...grpc.CallOption) (*TurnInPlaceResponse, error) {
	out := new(TurnInPlaceResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/TurnInPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SetHeadAngle(ctx context.Context, in *SetHeadAngleRequest, opts ...grpc.CallOption) (*SetHeadAngleResponse, error) {
	out := new(SetHeadAngleResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SetHeadAngle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SetLiftHeight(ctx context.Context, in *SetLiftHeightRequest, opts ...grpc.CallOption) (*SetLiftHeightResponse, error) {
	out := new(SetLiftHeightResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SetLiftHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) TurnTowardsFace(ctx context.Context, in *TurnTowardsFaceRequest, opts ...grpc.CallOption) (*TurnTowardsFaceResponse, error) {
	out := new(TurnTowardsFaceResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/TurnTowardsFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) GoToObject(ctx context.Context, in *GoToObjectRequest, opts ...grpc.CallOption) (*GoToObjectResponse, error) {
	out := new(GoToObjectResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/GoToObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) RollObject(ctx context.Context, in *RollObjectRequest, opts ...grpc.CallOption) (*RollObjectResponse, error) {
	out := new(RollObjectResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/RollObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) PopAWheelie(ctx context.Context, in *PopAWheelieRequest, opts ...grpc.CallOption) (*PopAWheelieResponse, error) {
	out := new(PopAWheelieResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/PopAWheelie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) PickupObject(ctx context.Context, in *PickupObjectRequest, opts ...grpc.CallOption) (*PickupObjectResponse, error) {
	out := new(PickupObjectResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/PickupObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) PlaceObjectOnGroundHere(ctx context.Context, in *PlaceObjectOnGroundHereRequest, opts ...grpc.CallOption) (*PlaceObjectOnGroundHereResponse, error) {
	out := new(PlaceObjectOnGroundHereResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/PlaceObjectOnGroundHere", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SetMasterVolume(ctx context.Context, in *MasterVolumeRequest, opts ...grpc.CallOption) (*MasterVolumeResponse, error) {
	out := new(MasterVolumeResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SetMasterVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) UserAuthentication(ctx context.Context, in *UserAuthenticationRequest, opts ...grpc.CallOption) (*UserAuthenticationResponse, error) {
	out := new(UserAuthenticationResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/UserAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) BatteryState(ctx context.Context, in *BatteryStateRequest, opts ...grpc.CallOption) (*BatteryStateResponse, error) {
	out := new(BatteryStateResponse)
	err := c.cc.Invoke(ctx, "/v1/battery_state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) VersionState(ctx context.Context, in *VersionStateRequest, opts ...grpc.CallOption) (*VersionStateResponse, error) {
	out := new(VersionStateResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/VersionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SayText(ctx context.Context, in *SayTextRequest, opts ...grpc.CallOption) (*SayTextResponse, error) {
	out := new(SayTextResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SayText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) ConnectCube(ctx context.Context, in *ConnectCubeRequest, opts ...grpc.CallOption) (*ConnectCubeResponse, error) {
	out := new(ConnectCubeResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/ConnectCube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DisconnectCube(ctx context.Context, in *DisconnectCubeRequest, opts ...grpc.CallOption) (*DisconnectCubeResponse, error) {
	out := new(DisconnectCubeResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DisconnectCube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) CubesAvailable(ctx context.Context, in *CubesAvailableRequest, opts ...grpc.CallOption) (*CubesAvailableResponse, error) {
	out := new(CubesAvailableResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/CubesAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) FlashCubeLights(ctx context.Context, in *FlashCubeLightsRequest, opts ...grpc.CallOption) (*FlashCubeLightsResponse, error) {
	out := new(FlashCubeLightsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/FlashCubeLights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) ForgetPreferredCube(ctx context.Context, in *ForgetPreferredCubeRequest, opts ...grpc.CallOption) (*ForgetPreferredCubeResponse, error) {
	out := new(ForgetPreferredCubeResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/ForgetPreferredCube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SetPreferredCube(ctx context.Context, in *SetPreferredCubeRequest, opts ...grpc.CallOption) (*SetPreferredCubeResponse, error) {
	out := new(SetPreferredCubeResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SetPreferredCube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DeleteCustomObjects(ctx context.Context, in *DeleteCustomObjectsRequest, opts ...grpc.CallOption) (*DeleteCustomObjectsResponse, error) {
	out := new(DeleteCustomObjectsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DeleteCustomObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) CreateFixedCustomObject(ctx context.Context, in *CreateFixedCustomObjectRequest, opts ...grpc.CallOption) (*CreateFixedCustomObjectResponse, error) {
	out := new(CreateFixedCustomObjectResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/CreateFixedCustomObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) DefineCustomObject(ctx context.Context, in *DefineCustomObjectRequest, opts ...grpc.CallOption) (*DefineCustomObjectResponse, error) {
	out := new(DefineCustomObjectResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/DefineCustomObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SetCubeLights(ctx context.Context, in *SetCubeLightsRequest, opts ...grpc.CallOption) (*SetCubeLightsResponse, error) {
	out := new(SetCubeLightsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SetCubeLights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) AudioFeed(ctx context.Context, in *AudioFeedRequest, opts ...grpc.CallOption) (ExternalInterface_AudioFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExternalInterface_serviceDesc.Streams[4], "/Anki.Vector.external_interface.ExternalInterface/AudioFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalInterfaceAudioFeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExternalInterface_AudioFeedClient interface {
	Recv() (*AudioFeedResponse, error)
	grpc.ClientStream
}

type externalInterfaceAudioFeedClient struct {
	grpc.ClientStream
}

func (x *externalInterfaceAudioFeedClient) Recv() (*AudioFeedResponse, error) {
	m := new(AudioFeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalInterfaceClient) CameraFeed(ctx context.Context, in *CameraFeedRequest, opts ...grpc.CallOption) (ExternalInterface_CameraFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExternalInterface_serviceDesc.Streams[5], "/Anki.Vector.external_interface.ExternalInterface/CameraFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalInterfaceCameraFeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExternalInterface_CameraFeedClient interface {
	Recv() (*CameraFeedResponse, error)
	grpc.ClientStream
}

type externalInterfaceCameraFeedClient struct {
	grpc.ClientStream
}

func (x *externalInterfaceCameraFeedClient) Recv() (*CameraFeedResponse, error) {
	m := new(CameraFeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalInterfaceClient) CaptureSingleImage(ctx context.Context, in *CaptureSingleImageRequest, opts ...grpc.CallOption) (*CaptureSingleImageResponse, error) {
	out := new(CaptureSingleImageResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/CaptureSingleImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SetEyeColor(ctx context.Context, in *SetEyeColorRequest, opts ...grpc.CallOption) (*SetEyeColorResponse, error) {
	out := new(SetEyeColorResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SetEyeColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) NavMapFeed(ctx context.Context, in *NavMapFeedRequest, opts ...grpc.CallOption) (ExternalInterface_NavMapFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExternalInterface_serviceDesc.Streams[6], "/Anki.Vector.external_interface.ExternalInterface/NavMapFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalInterfaceNavMapFeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExternalInterface_NavMapFeedClient interface {
	Recv() (*NavMapFeedResponse, error)
	grpc.ClientStream
}

type externalInterfaceNavMapFeedClient struct {
	grpc.ClientStream
}

func (x *externalInterfaceNavMapFeedClient) Recv() (*NavMapFeedResponse, error) {
	m := new(NavMapFeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalInterfaceClient) AppIntent(ctx context.Context, in *AppIntentRequest, opts ...grpc.CallOption) (*AppIntentResponse, error) {
	out := new(AppIntentResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/AppIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) GetOnboardingState(ctx context.Context, in *OnboardingStateRequest, opts ...grpc.CallOption) (*OnboardingStateResponse, error) {
	out := new(OnboardingStateResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/GetOnboardingState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) SendOnboardingInput(ctx context.Context, in *OnboardingInputRequest, opts ...grpc.CallOption) (*OnboardingInputResponse, error) {
	out := new(OnboardingInputResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/SendOnboardingInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) GetLatestAttentionTransfer(ctx context.Context, in *LatestAttentionTransferRequest, opts ...grpc.CallOption) (*LatestAttentionTransferResponse, error) {
	out := new(LatestAttentionTransferResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/GetLatestAttentionTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) PullJdocs(ctx context.Context, in *PullJdocsRequest, opts ...grpc.CallOption) (*PullJdocsResponse, error) {
	out := new(PullJdocsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/PullJdocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) UpdateAccountSettings(ctx context.Context, in *UpdateAccountSettingsRequest, opts ...grpc.CallOption) (*UpdateAccountSettingsResponse, error) {
	out := new(UpdateAccountSettingsResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/UpdateAccountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) StartUpdateEngine(ctx context.Context, in *CheckUpdateStatusRequest, opts ...grpc.CallOption) (*CheckUpdateStatusResponse, error) {
	out := new(CheckUpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/StartUpdateEngine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) CheckUpdateStatus(ctx context.Context, in *CheckUpdateStatusRequest, opts ...grpc.CallOption) (*CheckUpdateStatusResponse, error) {
	out := new(CheckUpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/CheckUpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) UpdateAndRestart(ctx context.Context, in *UpdateAndRestartRequest, opts ...grpc.CallOption) (*UpdateAndRestartResponse, error) {
	out := new(UpdateAndRestartResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/UpdateAndRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) CheckCloudConnection(ctx context.Context, in *CheckCloudRequest, opts ...grpc.CallOption) (*CheckCloudResponse, error) {
	out := new(CheckCloudResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/CheckCloudConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) GetFeatureFlag(ctx context.Context, in *FeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagResponse, error) {
	out := new(FeatureFlagResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/GetFeatureFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) GetFeatureFlagList(ctx context.Context, in *FeatureFlagListRequest, opts ...grpc.CallOption) (*FeatureFlagListResponse, error) {
	out := new(FeatureFlagListResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/GetFeatureFlagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) GetAlexaAuthState(ctx context.Context, in *AlexaAuthStateRequest, opts ...grpc.CallOption) (*AlexaAuthStateResponse, error) {
	out := new(AlexaAuthStateResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/GetAlexaAuthState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalInterfaceClient) AlexaOptIn(ctx context.Context, in *AlexaOptInRequest, opts ...grpc.CallOption) (*AlexaOptInResponse, error) {
	out := new(AlexaOptInResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.external_interface.ExternalInterface/AlexaOptIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalInterfaceServer is the server API for ExternalInterface service.
type ExternalInterfaceServer interface {
	// Checks the supported protocol version by passing in the client version and
	// minimum host version and receiving a response to see whether the versions are supported.
	ProtocolVersion(context.Context, *ProtocolVersionRequest) (*ProtocolVersionResponse, error)
	// SDK-only message to pass version info for device OS, Python version, etc.
	SDKInitialization(context.Context, *SDKInitializationRequest) (*SDKInitializationResponse, error)
	// Sets the speed and acceleration for Vector's wheel motors.
	DriveWheels(context.Context, *DriveWheelsRequest) (*DriveWheelsResponse, error)
	// Requests that Vector play an animation trigger.
	PlayAnimationTrigger(context.Context, *PlayAnimationTriggerRequest) (*PlayAnimationResponse, error)
	// Requests that Vector play an animation.
	PlayAnimation(context.Context, *PlayAnimationRequest) (*PlayAnimationResponse, error)
	// Constructs and returns a list of animations.
	ListAnimations(context.Context, *ListAnimationsRequest) (*ListAnimationsResponse, error)
	// Constructs and returns a list of animation triggers.
	ListAnimationTriggers(context.Context, *ListAnimationTriggersRequest) (*ListAnimationTriggersResponse, error)
	// Moves Vector's head.
	MoveHead(context.Context, *MoveHeadRequest) (*MoveHeadResponse, error)
	// Moves Vector's lift.
	MoveLift(context.Context, *MoveLiftRequest) (*MoveLiftResponse, error)
	// Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
	StopAllMotors(context.Context, *StopAllMotorsRequest) (*StopAllMotorsResponse, error)
	// Sets screen (Vector's face) to a solid color.
	DisplayFaceImageRGB(context.Context, *DisplayFaceImageRGBRequest) (*DisplayFaceImageRGBResponse, error)
	// Streaming events endpoint
	EventStream(*EventRequest, ExternalInterface_EventStreamServer) error
	// Play audio using Vector's speaker
	ExternalAudioStreamPlayback(ExternalInterface_ExternalAudioStreamPlaybackServer) error
	// Integrate with and acquire control of Vector's AI system.
	BehaviorControl(ExternalInterface_BehaviorControlServer) error
	// Acquire control of Vector's AI system.
	AssumeBehaviorControl(*BehaviorControlRequest, ExternalInterface_AssumeBehaviorControlServer) error
	CancelFaceEnrollment(context.Context, *CancelFaceEnrollmentRequest) (*CancelFaceEnrollmentResponse, error)
	// Get a list of names and their IDs.
	RequestEnrolledNames(context.Context, *RequestEnrolledNamesRequest) (*RequestEnrolledNamesResponse, error)
	// Update the name enrolled for a given face.
	UpdateEnrolledFaceByID(context.Context, *UpdateEnrolledFaceByIDRequest) (*UpdateEnrolledFaceByIDResponse, error)
	// Erase the enrollment (name) record for the face with this ID.
	EraseEnrolledFaceByID(context.Context, *EraseEnrolledFaceByIDRequest) (*EraseEnrolledFaceByIDResponse, error)
	// Erase the enrollment (name) records for all faces.
	EraseAllEnrolledFaces(context.Context, *EraseAllEnrolledFacesRequest) (*EraseAllEnrolledFacesResponse, error)
	SetFaceToEnroll(context.Context, *SetFaceToEnrollRequest) (*SetFaceToEnrollResponse, error)
	EnableMarkerDetection(context.Context, *EnableMarkerDetectionRequest) (*EnableMarkerDetectionResponse, error)
	EnableFaceDetection(context.Context, *EnableFaceDetectionRequest) (*EnableFaceDetectionResponse, error)
	EnableMotionDetection(context.Context, *EnableMotionDetectionRequest) (*EnableMotionDetectionResponse, error)
	EnableMirrorMode(context.Context, *EnableMirrorModeRequest) (*EnableMirrorModeResponse, error)
	EnableImageStreaming(context.Context, *EnableImageStreamingRequest) (*EnableImageStreamingResponse, error)
	IsImageStreamingEnabled(context.Context, *IsImageStreamingEnabledRequest) (*IsImageStreamingEnabledResponse, error)
	// Cancel action by id
	CancelActionByIdTag(context.Context, *CancelActionByIdTagRequest) (*CancelActionByIdTagResponse, error)
	// Tells Vector to drive to the specified pose and orientation.
	GoToPose(context.Context, *GoToPoseRequest) (*GoToPoseResponse, error)
	// Tells Vector to dock with a light cube with a given approach angle and distance.
	DockWithCube(context.Context, *DockWithCubeRequest) (*DockWithCubeResponse, error)
	// Drive Vector off the charger.
	DriveOffCharger(context.Context, *DriveOffChargerRequest) (*DriveOffChargerResponse, error)
	// Drive Vector onto the charger.
	DriveOnCharger(context.Context, *DriveOnChargerRequest) (*DriveOnChargerResponse, error)
	// Make Vector look for faces by turning and angling his head
	FindFaces(context.Context, *FindFacesRequest) (*FindFacesResponse, error)
	// Make Vector look around in place by turning and moving his head
	LookAroundInPlace(context.Context, *LookAroundInPlaceRequest) (*LookAroundInPlaceResponse, error)
	// Make Vector roll his block, regardless of relative position and orientation
	RollBlock(context.Context, *RollBlockRequest) (*RollBlockResponse, error)
	// Get the photos info.
	PhotosInfo(context.Context, *PhotosInfoRequest) (*PhotosInfoResponse, error)
	// Get a photo by ID.
	Photo(context.Context, *PhotoRequest) (*PhotoResponse, error)
	// Get a thumbnail by ID.
	Thumbnail(context.Context, *ThumbnailRequest) (*ThumbnailResponse, error)
	// Delete a photo by ID.
	DeletePhoto(context.Context, *DeletePhotoRequest) (*DeletePhotoResponse, error)
	// Tells Vector to drive in a straight line.
	DriveStraight(context.Context, *DriveStraightRequest) (*DriveStraightResponse, error)
	// Turn the robot around its current position.
	TurnInPlace(context.Context, *TurnInPlaceRequest) (*TurnInPlaceResponse, error)
	// Tell Vector's head to move to a given angle.
	SetHeadAngle(context.Context, *SetHeadAngleRequest) (*SetHeadAngleResponse, error)
	// Tell Vector's lift to move to a given height.
	SetLiftHeight(context.Context, *SetLiftHeightRequest) (*SetLiftHeightResponse, error)
	// Tell Vector to turn towards this face.
	TurnTowardsFace(context.Context, *TurnTowardsFaceRequest) (*TurnTowardsFaceResponse, error)
	// Tell Vector to drive to the specified object.
	GoToObject(context.Context, *GoToObjectRequest) (*GoToObjectResponse, error)
	// Tell Vector to roll his cube.
	RollObject(context.Context, *RollObjectRequest) (*RollObjectResponse, error)
	// Tell Vector to "pop a wheelie" using his cube.
	PopAWheelie(context.Context, *PopAWheelieRequest) (*PopAWheelieResponse, error)
	// Instruct the robot to pick up the supplied object.
	PickupObject(context.Context, *PickupObjectRequest) (*PickupObjectResponse, error)
	// Ask Vector to place the object he is carrying on the ground at the current location.
	PlaceObjectOnGroundHere(context.Context, *PlaceObjectOnGroundHereRequest) (*PlaceObjectOnGroundHereResponse, error)
	// Set the Robot's master volume
	SetMasterVolume(context.Context, *MasterVolumeRequest) (*MasterVolumeResponse, error)
	UserAuthentication(context.Context, *UserAuthenticationRequest) (*UserAuthenticationResponse, error)
	// Check the current state of the battery.
	BatteryState(context.Context, *BatteryStateRequest) (*BatteryStateResponse, error)
	// Get the versioning information for Vector.
	VersionState(context.Context, *VersionStateRequest) (*VersionStateResponse, error)
	// Make Vector speak text.
	SayText(context.Context, *SayTextRequest) (*SayTextResponse, error)
	// Attempt to connect to a cube. If a cube is currently connected,
	// this will do nothing.
	ConnectCube(context.Context, *ConnectCubeRequest) (*ConnectCubeResponse, error)
	// Requests a disconnection from the currently connected cube.
	DisconnectCube(context.Context, *DisconnectCubeRequest) (*DisconnectCubeResponse, error)
	CubesAvailable(context.Context, *CubesAvailableRequest) (*CubesAvailableResponse, error)
	// Signal a connected cube to flash its lights using the default cube
	// flash animation.
	FlashCubeLights(context.Context, *FlashCubeLightsRequest) (*FlashCubeLightsResponse, error)
	// Forget the robot's preferred cube. This will cause the robot to
	// connect to the cube with the highest RSSI (signal strength) next
	// time a connection is requested. Saves this preference to disk.
	// The next cube that the robot connects to will become its
	// preferred cube.
	ForgetPreferredCube(context.Context, *ForgetPreferredCubeRequest) (*ForgetPreferredCubeResponse, error)
	// Set the robot's preferred cube and save it to disk. The robot
	// will always attempt to connect to this cube if it is available.
	// This is only used in simulation for now.
	SetPreferredCube(context.Context, *SetPreferredCubeRequest) (*SetPreferredCubeResponse, error)
	// Causes the robot to forget about custom objects it currently knows about.
	DeleteCustomObjects(context.Context, *DeleteCustomObjectsRequest) (*DeleteCustomObjectsResponse, error)
	// Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
	CreateFixedCustomObject(context.Context, *CreateFixedCustomObjectRequest) (*CreateFixedCustomObjectResponse, error)
	// Creates a custom object with distinct custom marker(s).
	DefineCustomObject(context.Context, *DefineCustomObjectRequest) (*DefineCustomObjectResponse, error)
	// Set each of the lights on the currently connected cube based on two
	// rgb values each and timing data for how to transition between them.
	SetCubeLights(context.Context, *SetCubeLightsRequest) (*SetCubeLightsResponse, error)
	// Request an audio feed from the robot.
	AudioFeed(*AudioFeedRequest, ExternalInterface_AudioFeedServer) error
	// Request a camera feed from the robot.
	CameraFeed(*CameraFeedRequest, ExternalInterface_CameraFeedServer) error
	// Request a single image to be captured and sent from the robot.
	CaptureSingleImage(context.Context, *CaptureSingleImageRequest) (*CaptureSingleImageResponse, error)
	// Set Vector's eye color.
	SetEyeColor(context.Context, *SetEyeColorRequest) (*SetEyeColorResponse, error)
	// Stream navigation map data.
	NavMapFeed(*NavMapFeedRequest, ExternalInterface_NavMapFeedServer) error
	AppIntent(context.Context, *AppIntentRequest) (*AppIntentResponse, error)
	GetOnboardingState(context.Context, *OnboardingStateRequest) (*OnboardingStateResponse, error)
	SendOnboardingInput(context.Context, *OnboardingInputRequest) (*OnboardingInputResponse, error)
	GetLatestAttentionTransfer(context.Context, *LatestAttentionTransferRequest) (*LatestAttentionTransferResponse, error)
	PullJdocs(context.Context, *PullJdocsRequest) (*PullJdocsResponse, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	UpdateAccountSettings(context.Context, *UpdateAccountSettingsRequest) (*UpdateAccountSettingsResponse, error)
	// StartUpdateEngine cycles the update-engine service (to start a new check for an update) and sets up a stream of
	// UpdateStatusResponse Events.
	StartUpdateEngine(context.Context, *CheckUpdateStatusRequest) (*CheckUpdateStatusResponse, error)
	// CheckUpdateStatus tells if the robot is ready to reboot and update.
	CheckUpdateStatus(context.Context, *CheckUpdateStatusRequest) (*CheckUpdateStatusResponse, error)
	UpdateAndRestart(context.Context, *UpdateAndRestartRequest) (*UpdateAndRestartResponse, error)
	CheckCloudConnection(context.Context, *CheckCloudRequest) (*CheckCloudResponse, error)
	GetFeatureFlag(context.Context, *FeatureFlagRequest) (*FeatureFlagResponse, error)
	GetFeatureFlagList(context.Context, *FeatureFlagListRequest) (*FeatureFlagListResponse, error)
	GetAlexaAuthState(context.Context, *AlexaAuthStateRequest) (*AlexaAuthStateResponse, error)
	AlexaOptIn(context.Context, *AlexaOptInRequest) (*AlexaOptInResponse, error)
}

// UnimplementedExternalInterfaceServer can be embedded to have forward compatible implementations.
type UnimplementedExternalInterfaceServer struct {
}

func (*UnimplementedExternalInterfaceServer) ProtocolVersion(context.Context, *ProtocolVersionRequest) (*ProtocolVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolVersion not implemented")
}
func (*UnimplementedExternalInterfaceServer) SDKInitialization(context.Context, *SDKInitializationRequest) (*SDKInitializationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDKInitialization not implemented")
}
func (*UnimplementedExternalInterfaceServer) DriveWheels(context.Context, *DriveWheelsRequest) (*DriveWheelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveWheels not implemented")
}
func (*UnimplementedExternalInterfaceServer) PlayAnimationTrigger(context.Context, *PlayAnimationTriggerRequest) (*PlayAnimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayAnimationTrigger not implemented")
}
func (*UnimplementedExternalInterfaceServer) PlayAnimation(context.Context, *PlayAnimationRequest) (*PlayAnimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayAnimation not implemented")
}
func (*UnimplementedExternalInterfaceServer) ListAnimations(context.Context, *ListAnimationsRequest) (*ListAnimationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnimations not implemented")
}
func (*UnimplementedExternalInterfaceServer) ListAnimationTriggers(context.Context, *ListAnimationTriggersRequest) (*ListAnimationTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnimationTriggers not implemented")
}
func (*UnimplementedExternalInterfaceServer) MoveHead(context.Context, *MoveHeadRequest) (*MoveHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveHead not implemented")
}
func (*UnimplementedExternalInterfaceServer) MoveLift(context.Context, *MoveLiftRequest) (*MoveLiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveLift not implemented")
}
func (*UnimplementedExternalInterfaceServer) StopAllMotors(context.Context, *StopAllMotorsRequest) (*StopAllMotorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllMotors not implemented")
}
func (*UnimplementedExternalInterfaceServer) DisplayFaceImageRGB(context.Context, *DisplayFaceImageRGBRequest) (*DisplayFaceImageRGBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayFaceImageRGB not implemented")
}
func (*UnimplementedExternalInterfaceServer) EventStream(*EventRequest, ExternalInterface_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (*UnimplementedExternalInterfaceServer) ExternalAudioStreamPlayback(ExternalInterface_ExternalAudioStreamPlaybackServer) error {
	return status.Errorf(codes.Unimplemented, "method ExternalAudioStreamPlayback not implemented")
}
func (*UnimplementedExternalInterfaceServer) BehaviorControl(ExternalInterface_BehaviorControlServer) error {
	return status.Errorf(codes.Unimplemented, "method BehaviorControl not implemented")
}
func (*UnimplementedExternalInterfaceServer) AssumeBehaviorControl(*BehaviorControlRequest, ExternalInterface_AssumeBehaviorControlServer) error {
	return status.Errorf(codes.Unimplemented, "method AssumeBehaviorControl not implemented")
}
func (*UnimplementedExternalInterfaceServer) CancelFaceEnrollment(context.Context, *CancelFaceEnrollmentRequest) (*CancelFaceEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFaceEnrollment not implemented")
}
func (*UnimplementedExternalInterfaceServer) RequestEnrolledNames(context.Context, *RequestEnrolledNamesRequest) (*RequestEnrolledNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEnrolledNames not implemented")
}
func (*UnimplementedExternalInterfaceServer) UpdateEnrolledFaceByID(context.Context, *UpdateEnrolledFaceByIDRequest) (*UpdateEnrolledFaceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrolledFaceByID not implemented")
}
func (*UnimplementedExternalInterfaceServer) EraseEnrolledFaceByID(context.Context, *EraseEnrolledFaceByIDRequest) (*EraseEnrolledFaceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraseEnrolledFaceByID not implemented")
}
func (*UnimplementedExternalInterfaceServer) EraseAllEnrolledFaces(context.Context, *EraseAllEnrolledFacesRequest) (*EraseAllEnrolledFacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraseAllEnrolledFaces not implemented")
}
func (*UnimplementedExternalInterfaceServer) SetFaceToEnroll(context.Context, *SetFaceToEnrollRequest) (*SetFaceToEnrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFaceToEnroll not implemented")
}
func (*UnimplementedExternalInterfaceServer) EnableMarkerDetection(context.Context, *EnableMarkerDetectionRequest) (*EnableMarkerDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMarkerDetection not implemented")
}
func (*UnimplementedExternalInterfaceServer) EnableFaceDetection(context.Context, *EnableFaceDetectionRequest) (*EnableFaceDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFaceDetection not implemented")
}
func (*UnimplementedExternalInterfaceServer) EnableMotionDetection(context.Context, *EnableMotionDetectionRequest) (*EnableMotionDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMotionDetection not implemented")
}
func (*UnimplementedExternalInterfaceServer) EnableMirrorMode(context.Context, *EnableMirrorModeRequest) (*EnableMirrorModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMirrorMode not implemented")
}
func (*UnimplementedExternalInterfaceServer) EnableImageStreaming(context.Context, *EnableImageStreamingRequest) (*EnableImageStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableImageStreaming not implemented")
}
func (*UnimplementedExternalInterfaceServer) IsImageStreamingEnabled(context.Context, *IsImageStreamingEnabledRequest) (*IsImageStreamingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsImageStreamingEnabled not implemented")
}
func (*UnimplementedExternalInterfaceServer) CancelActionByIdTag(context.Context, *CancelActionByIdTagRequest) (*CancelActionByIdTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelActionByIdTag not implemented")
}
func (*UnimplementedExternalInterfaceServer) GoToPose(context.Context, *GoToPoseRequest) (*GoToPoseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoToPose not implemented")
}
func (*UnimplementedExternalInterfaceServer) DockWithCube(context.Context, *DockWithCubeRequest) (*DockWithCubeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DockWithCube not implemented")
}
func (*UnimplementedExternalInterfaceServer) DriveOffCharger(context.Context, *DriveOffChargerRequest) (*DriveOffChargerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveOffCharger not implemented")
}
func (*UnimplementedExternalInterfaceServer) DriveOnCharger(context.Context, *DriveOnChargerRequest) (*DriveOnChargerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveOnCharger not implemented")
}
func (*UnimplementedExternalInterfaceServer) FindFaces(context.Context, *FindFacesRequest) (*FindFacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFaces not implemented")
}
func (*UnimplementedExternalInterfaceServer) LookAroundInPlace(context.Context, *LookAroundInPlaceRequest) (*LookAroundInPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookAroundInPlace not implemented")
}
func (*UnimplementedExternalInterfaceServer) RollBlock(context.Context, *RollBlockRequest) (*RollBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollBlock not implemented")
}
func (*UnimplementedExternalInterfaceServer) PhotosInfo(context.Context, *PhotosInfoRequest) (*PhotosInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosInfo not implemented")
}
func (*UnimplementedExternalInterfaceServer) Photo(context.Context, *PhotoRequest) (*PhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Photo not implemented")
}
func (*UnimplementedExternalInterfaceServer) Thumbnail(context.Context, *ThumbnailRequest) (*ThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumbnail not implemented")
}
func (*UnimplementedExternalInterfaceServer) DeletePhoto(context.Context, *DeletePhotoRequest) (*DeletePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (*UnimplementedExternalInterfaceServer) DriveStraight(context.Context, *DriveStraightRequest) (*DriveStraightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveStraight not implemented")
}
func (*UnimplementedExternalInterfaceServer) TurnInPlace(context.Context, *TurnInPlaceRequest) (*TurnInPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnInPlace not implemented")
}
func (*UnimplementedExternalInterfaceServer) SetHeadAngle(context.Context, *SetHeadAngleRequest) (*SetHeadAngleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHeadAngle not implemented")
}
func (*UnimplementedExternalInterfaceServer) SetLiftHeight(context.Context, *SetLiftHeightRequest) (*SetLiftHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLiftHeight not implemented")
}
func (*UnimplementedExternalInterfaceServer) TurnTowardsFace(context.Context, *TurnTowardsFaceRequest) (*TurnTowardsFaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnTowardsFace not implemented")
}
func (*UnimplementedExternalInterfaceServer) GoToObject(context.Context, *GoToObjectRequest) (*GoToObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoToObject not implemented")
}
func (*UnimplementedExternalInterfaceServer) RollObject(context.Context, *RollObjectRequest) (*RollObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollObject not implemented")
}
func (*UnimplementedExternalInterfaceServer) PopAWheelie(context.Context, *PopAWheelieRequest) (*PopAWheelieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopAWheelie not implemented")
}
func (*UnimplementedExternalInterfaceServer) PickupObject(context.Context, *PickupObjectRequest) (*PickupObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickupObject not implemented")
}
func (*UnimplementedExternalInterfaceServer) PlaceObjectOnGroundHere(context.Context, *PlaceObjectOnGroundHereRequest) (*PlaceObjectOnGroundHereResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceObjectOnGroundHere not implemented")
}
func (*UnimplementedExternalInterfaceServer) SetMasterVolume(context.Context, *MasterVolumeRequest) (*MasterVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMasterVolume not implemented")
}
func (*UnimplementedExternalInterfaceServer) UserAuthentication(context.Context, *UserAuthenticationRequest) (*UserAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthentication not implemented")
}
func (*UnimplementedExternalInterfaceServer) BatteryState(context.Context, *BatteryStateRequest) (*BatteryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatteryState not implemented")
}
func (*UnimplementedExternalInterfaceServer) VersionState(context.Context, *VersionStateRequest) (*VersionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionState not implemented")
}
func (*UnimplementedExternalInterfaceServer) SayText(context.Context, *SayTextRequest) (*SayTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayText not implemented")
}
func (*UnimplementedExternalInterfaceServer) ConnectCube(context.Context, *ConnectCubeRequest) (*ConnectCubeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectCube not implemented")
}
func (*UnimplementedExternalInterfaceServer) DisconnectCube(context.Context, *DisconnectCubeRequest) (*DisconnectCubeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectCube not implemented")
}
func (*UnimplementedExternalInterfaceServer) CubesAvailable(context.Context, *CubesAvailableRequest) (*CubesAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CubesAvailable not implemented")
}
func (*UnimplementedExternalInterfaceServer) FlashCubeLights(context.Context, *FlashCubeLightsRequest) (*FlashCubeLightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlashCubeLights not implemented")
}
func (*UnimplementedExternalInterfaceServer) ForgetPreferredCube(context.Context, *ForgetPreferredCubeRequest) (*ForgetPreferredCubeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPreferredCube not implemented")
}
func (*UnimplementedExternalInterfaceServer) SetPreferredCube(context.Context, *SetPreferredCubeRequest) (*SetPreferredCubeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPreferredCube not implemented")
}
func (*UnimplementedExternalInterfaceServer) DeleteCustomObjects(context.Context, *DeleteCustomObjectsRequest) (*DeleteCustomObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomObjects not implemented")
}
func (*UnimplementedExternalInterfaceServer) CreateFixedCustomObject(context.Context, *CreateFixedCustomObjectRequest) (*CreateFixedCustomObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFixedCustomObject not implemented")
}
func (*UnimplementedExternalInterfaceServer) DefineCustomObject(context.Context, *DefineCustomObjectRequest) (*DefineCustomObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineCustomObject not implemented")
}
func (*UnimplementedExternalInterfaceServer) SetCubeLights(context.Context, *SetCubeLightsRequest) (*SetCubeLightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCubeLights not implemented")
}
func (*UnimplementedExternalInterfaceServer) AudioFeed(*AudioFeedRequest, ExternalInterface_AudioFeedServer) error {
	return status.Errorf(codes.Unimplemented, "method AudioFeed not implemented")
}
func (*UnimplementedExternalInterfaceServer) CameraFeed(*CameraFeedRequest, ExternalInterface_CameraFeedServer) error {
	return status.Errorf(codes.Unimplemented, "method CameraFeed not implemented")
}
func (*UnimplementedExternalInterfaceServer) CaptureSingleImage(context.Context, *CaptureSingleImageRequest) (*CaptureSingleImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureSingleImage not implemented")
}
func (*UnimplementedExternalInterfaceServer) SetEyeColor(context.Context, *SetEyeColorRequest) (*SetEyeColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEyeColor not implemented")
}
func (*UnimplementedExternalInterfaceServer) NavMapFeed(*NavMapFeedRequest, ExternalInterface_NavMapFeedServer) error {
	return status.Errorf(codes.Unimplemented, "method NavMapFeed not implemented")
}
func (*UnimplementedExternalInterfaceServer) AppIntent(context.Context, *AppIntentRequest) (*AppIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppIntent not implemented")
}
func (*UnimplementedExternalInterfaceServer) GetOnboardingState(context.Context, *OnboardingStateRequest) (*OnboardingStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnboardingState not implemented")
}
func (*UnimplementedExternalInterfaceServer) SendOnboardingInput(context.Context, *OnboardingInputRequest) (*OnboardingInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOnboardingInput not implemented")
}
func (*UnimplementedExternalInterfaceServer) GetLatestAttentionTransfer(context.Context, *LatestAttentionTransferRequest) (*LatestAttentionTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAttentionTransfer not implemented")
}
func (*UnimplementedExternalInterfaceServer) PullJdocs(context.Context, *PullJdocsRequest) (*PullJdocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullJdocs not implemented")
}
func (*UnimplementedExternalInterfaceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (*UnimplementedExternalInterfaceServer) UpdateAccountSettings(context.Context, *UpdateAccountSettingsRequest) (*UpdateAccountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountSettings not implemented")
}
func (*UnimplementedExternalInterfaceServer) StartUpdateEngine(context.Context, *CheckUpdateStatusRequest) (*CheckUpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUpdateEngine not implemented")
}
func (*UnimplementedExternalInterfaceServer) CheckUpdateStatus(context.Context, *CheckUpdateStatusRequest) (*CheckUpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUpdateStatus not implemented")
}
func (*UnimplementedExternalInterfaceServer) UpdateAndRestart(context.Context, *UpdateAndRestartRequest) (*UpdateAndRestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAndRestart not implemented")
}
func (*UnimplementedExternalInterfaceServer) CheckCloudConnection(context.Context, *CheckCloudRequest) (*CheckCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCloudConnection not implemented")
}
func (*UnimplementedExternalInterfaceServer) GetFeatureFlag(context.Context, *FeatureFlagRequest) (*FeatureFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlag not implemented")
}
func (*UnimplementedExternalInterfaceServer) GetFeatureFlagList(context.Context, *FeatureFlagListRequest) (*FeatureFlagListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlagList not implemented")
}
func (*UnimplementedExternalInterfaceServer) GetAlexaAuthState(context.Context, *AlexaAuthStateRequest) (*AlexaAuthStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlexaAuthState not implemented")
}
func (*UnimplementedExternalInterfaceServer) AlexaOptIn(context.Context, *AlexaOptInRequest) (*AlexaOptInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlexaOptIn not implemented")
}

func RegisterExternalInterfaceServer(s *grpc.Server, srv ExternalInterfaceServer) {
	s.RegisterService(&_ExternalInterface_serviceDesc, srv)
}

func _ExternalInterface_ProtocolVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).ProtocolVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/ProtocolVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).ProtocolVersion(ctx, req.(*ProtocolVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SDKInitialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDKInitializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SDKInitialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SDKInitialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SDKInitialization(ctx, req.(*SDKInitializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DriveWheels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveWheelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DriveWheels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DriveWheels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DriveWheels(ctx, req.(*DriveWheelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_PlayAnimationTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayAnimationTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).PlayAnimationTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/PlayAnimationTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).PlayAnimationTrigger(ctx, req.(*PlayAnimationTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_PlayAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayAnimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).PlayAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/PlayAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).PlayAnimation(ctx, req.(*PlayAnimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_ListAnimations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnimationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).ListAnimations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/ListAnimations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).ListAnimations(ctx, req.(*ListAnimationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_ListAnimationTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnimationTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).ListAnimationTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/ListAnimationTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).ListAnimationTriggers(ctx, req.(*ListAnimationTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_MoveHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).MoveHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/MoveHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).MoveHead(ctx, req.(*MoveHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_MoveLift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveLiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).MoveLift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/MoveLift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).MoveLift(ctx, req.(*MoveLiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_StopAllMotors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllMotorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).StopAllMotors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/StopAllMotors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).StopAllMotors(ctx, req.(*StopAllMotorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DisplayFaceImageRGB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayFaceImageRGBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DisplayFaceImageRGB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DisplayFaceImageRGB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DisplayFaceImageRGB(ctx, req.(*DisplayFaceImageRGBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalInterfaceServer).EventStream(m, &externalInterfaceEventStreamServer{stream})
}

type ExternalInterface_EventStreamServer interface {
	Send(*EventResponse) error
	grpc.ServerStream
}

type externalInterfaceEventStreamServer struct {
	grpc.ServerStream
}

func (x *externalInterfaceEventStreamServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExternalInterface_ExternalAudioStreamPlayback_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExternalInterfaceServer).ExternalAudioStreamPlayback(&externalInterfaceExternalAudioStreamPlaybackServer{stream})
}

type ExternalInterface_ExternalAudioStreamPlaybackServer interface {
	Send(*ExternalAudioStreamResponse) error
	Recv() (*ExternalAudioStreamRequest, error)
	grpc.ServerStream
}

type externalInterfaceExternalAudioStreamPlaybackServer struct {
	grpc.ServerStream
}

func (x *externalInterfaceExternalAudioStreamPlaybackServer) Send(m *ExternalAudioStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *externalInterfaceExternalAudioStreamPlaybackServer) Recv() (*ExternalAudioStreamRequest, error) {
	m := new(ExternalAudioStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExternalInterface_BehaviorControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExternalInterfaceServer).BehaviorControl(&externalInterfaceBehaviorControlServer{stream})
}

type ExternalInterface_BehaviorControlServer interface {
	Send(*BehaviorControlResponse) error
	Recv() (*BehaviorControlRequest, error)
	grpc.ServerStream
}

type externalInterfaceBehaviorControlServer struct {
	grpc.ServerStream
}

func (x *externalInterfaceBehaviorControlServer) Send(m *BehaviorControlResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *externalInterfaceBehaviorControlServer) Recv() (*BehaviorControlRequest, error) {
	m := new(BehaviorControlRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExternalInterface_AssumeBehaviorControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BehaviorControlRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalInterfaceServer).AssumeBehaviorControl(m, &externalInterfaceAssumeBehaviorControlServer{stream})
}

type ExternalInterface_AssumeBehaviorControlServer interface {
	Send(*BehaviorControlResponse) error
	grpc.ServerStream
}

type externalInterfaceAssumeBehaviorControlServer struct {
	grpc.ServerStream
}

func (x *externalInterfaceAssumeBehaviorControlServer) Send(m *BehaviorControlResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExternalInterface_CancelFaceEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFaceEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).CancelFaceEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/CancelFaceEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).CancelFaceEnrollment(ctx, req.(*CancelFaceEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_RequestEnrolledNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEnrolledNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).RequestEnrolledNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/RequestEnrolledNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).RequestEnrolledNames(ctx, req.(*RequestEnrolledNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_UpdateEnrolledFaceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnrolledFaceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).UpdateEnrolledFaceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/UpdateEnrolledFaceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).UpdateEnrolledFaceByID(ctx, req.(*UpdateEnrolledFaceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_EraseEnrolledFaceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EraseEnrolledFaceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).EraseEnrolledFaceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/EraseEnrolledFaceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).EraseEnrolledFaceByID(ctx, req.(*EraseEnrolledFaceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_EraseAllEnrolledFaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EraseAllEnrolledFacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).EraseAllEnrolledFaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/EraseAllEnrolledFaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).EraseAllEnrolledFaces(ctx, req.(*EraseAllEnrolledFacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SetFaceToEnroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFaceToEnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SetFaceToEnroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SetFaceToEnroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SetFaceToEnroll(ctx, req.(*SetFaceToEnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_EnableMarkerDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMarkerDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).EnableMarkerDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/EnableMarkerDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).EnableMarkerDetection(ctx, req.(*EnableMarkerDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_EnableFaceDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFaceDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).EnableFaceDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/EnableFaceDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).EnableFaceDetection(ctx, req.(*EnableFaceDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_EnableMotionDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMotionDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).EnableMotionDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/EnableMotionDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).EnableMotionDetection(ctx, req.(*EnableMotionDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_EnableMirrorMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMirrorModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).EnableMirrorMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/EnableMirrorMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).EnableMirrorMode(ctx, req.(*EnableMirrorModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_EnableImageStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableImageStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).EnableImageStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/EnableImageStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).EnableImageStreaming(ctx, req.(*EnableImageStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_IsImageStreamingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsImageStreamingEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).IsImageStreamingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/IsImageStreamingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).IsImageStreamingEnabled(ctx, req.(*IsImageStreamingEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_CancelActionByIdTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelActionByIdTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).CancelActionByIdTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/CancelActionByIdTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).CancelActionByIdTag(ctx, req.(*CancelActionByIdTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_GoToPose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoToPoseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).GoToPose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/GoToPose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).GoToPose(ctx, req.(*GoToPoseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DockWithCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockWithCubeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DockWithCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DockWithCube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DockWithCube(ctx, req.(*DockWithCubeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DriveOffCharger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveOffChargerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DriveOffCharger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DriveOffCharger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DriveOffCharger(ctx, req.(*DriveOffChargerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DriveOnCharger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveOnChargerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DriveOnCharger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DriveOnCharger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DriveOnCharger(ctx, req.(*DriveOnChargerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_FindFaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).FindFaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/FindFaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).FindFaces(ctx, req.(*FindFacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_LookAroundInPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookAroundInPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).LookAroundInPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/LookAroundInPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).LookAroundInPlace(ctx, req.(*LookAroundInPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_RollBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).RollBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/RollBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).RollBlock(ctx, req.(*RollBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_PhotosInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotosInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).PhotosInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/PhotosInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).PhotosInfo(ctx, req.(*PhotosInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_Photo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).Photo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/Photo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).Photo(ctx, req.(*PhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_Thumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).Thumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/Thumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).Thumbnail(ctx, req.(*ThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DeletePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DeletePhoto(ctx, req.(*DeletePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DriveStraight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveStraightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DriveStraight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DriveStraight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DriveStraight(ctx, req.(*DriveStraightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_TurnInPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnInPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).TurnInPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/TurnInPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).TurnInPlace(ctx, req.(*TurnInPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SetHeadAngle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHeadAngleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SetHeadAngle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SetHeadAngle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SetHeadAngle(ctx, req.(*SetHeadAngleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SetLiftHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLiftHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SetLiftHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SetLiftHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SetLiftHeight(ctx, req.(*SetLiftHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_TurnTowardsFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnTowardsFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).TurnTowardsFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/TurnTowardsFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).TurnTowardsFace(ctx, req.(*TurnTowardsFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_GoToObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoToObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).GoToObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/GoToObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).GoToObject(ctx, req.(*GoToObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_RollObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).RollObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/RollObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).RollObject(ctx, req.(*RollObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_PopAWheelie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopAWheelieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).PopAWheelie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/PopAWheelie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).PopAWheelie(ctx, req.(*PopAWheelieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_PickupObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickupObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).PickupObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/PickupObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).PickupObject(ctx, req.(*PickupObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_PlaceObjectOnGroundHere_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceObjectOnGroundHereRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).PlaceObjectOnGroundHere(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/PlaceObjectOnGroundHere",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).PlaceObjectOnGroundHere(ctx, req.(*PlaceObjectOnGroundHereRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SetMasterVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SetMasterVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SetMasterVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SetMasterVolume(ctx, req.(*MasterVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_UserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).UserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/UserAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).UserAuthentication(ctx, req.(*UserAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_BatteryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatteryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).BatteryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1/battery_state",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).BatteryState(ctx, req.(*BatteryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_VersionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).VersionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/VersionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).VersionState(ctx, req.(*VersionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SayText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SayText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SayText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SayText(ctx, req.(*SayTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_ConnectCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectCubeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).ConnectCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/ConnectCube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).ConnectCube(ctx, req.(*ConnectCubeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DisconnectCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectCubeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DisconnectCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DisconnectCube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DisconnectCube(ctx, req.(*DisconnectCubeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_CubesAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CubesAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).CubesAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/CubesAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).CubesAvailable(ctx, req.(*CubesAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_FlashCubeLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlashCubeLightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).FlashCubeLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/FlashCubeLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).FlashCubeLights(ctx, req.(*FlashCubeLightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_ForgetPreferredCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetPreferredCubeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).ForgetPreferredCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/ForgetPreferredCube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).ForgetPreferredCube(ctx, req.(*ForgetPreferredCubeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SetPreferredCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPreferredCubeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SetPreferredCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SetPreferredCube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SetPreferredCube(ctx, req.(*SetPreferredCubeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DeleteCustomObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DeleteCustomObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DeleteCustomObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DeleteCustomObjects(ctx, req.(*DeleteCustomObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_CreateFixedCustomObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFixedCustomObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).CreateFixedCustomObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/CreateFixedCustomObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).CreateFixedCustomObject(ctx, req.(*CreateFixedCustomObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_DefineCustomObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefineCustomObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).DefineCustomObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/DefineCustomObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).DefineCustomObject(ctx, req.(*DefineCustomObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SetCubeLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCubeLightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SetCubeLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SetCubeLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SetCubeLights(ctx, req.(*SetCubeLightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_AudioFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AudioFeedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalInterfaceServer).AudioFeed(m, &externalInterfaceAudioFeedServer{stream})
}

type ExternalInterface_AudioFeedServer interface {
	Send(*AudioFeedResponse) error
	grpc.ServerStream
}

type externalInterfaceAudioFeedServer struct {
	grpc.ServerStream
}

func (x *externalInterfaceAudioFeedServer) Send(m *AudioFeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExternalInterface_CameraFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CameraFeedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalInterfaceServer).CameraFeed(m, &externalInterfaceCameraFeedServer{stream})
}

type ExternalInterface_CameraFeedServer interface {
	Send(*CameraFeedResponse) error
	grpc.ServerStream
}

type externalInterfaceCameraFeedServer struct {
	grpc.ServerStream
}

func (x *externalInterfaceCameraFeedServer) Send(m *CameraFeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExternalInterface_CaptureSingleImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureSingleImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).CaptureSingleImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/CaptureSingleImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).CaptureSingleImage(ctx, req.(*CaptureSingleImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SetEyeColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEyeColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SetEyeColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SetEyeColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SetEyeColor(ctx, req.(*SetEyeColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_NavMapFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NavMapFeedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalInterfaceServer).NavMapFeed(m, &externalInterfaceNavMapFeedServer{stream})
}

type ExternalInterface_NavMapFeedServer interface {
	Send(*NavMapFeedResponse) error
	grpc.ServerStream
}

type externalInterfaceNavMapFeedServer struct {
	grpc.ServerStream
}

func (x *externalInterfaceNavMapFeedServer) Send(m *NavMapFeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExternalInterface_AppIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).AppIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/AppIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).AppIntent(ctx, req.(*AppIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_GetOnboardingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).GetOnboardingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/GetOnboardingState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).GetOnboardingState(ctx, req.(*OnboardingStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_SendOnboardingInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).SendOnboardingInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/SendOnboardingInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).SendOnboardingInput(ctx, req.(*OnboardingInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_GetLatestAttentionTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestAttentionTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).GetLatestAttentionTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/GetLatestAttentionTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).GetLatestAttentionTransfer(ctx, req.(*LatestAttentionTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_PullJdocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullJdocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).PullJdocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/PullJdocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).PullJdocs(ctx, req.(*PullJdocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_UpdateAccountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).UpdateAccountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/UpdateAccountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).UpdateAccountSettings(ctx, req.(*UpdateAccountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_StartUpdateEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).StartUpdateEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/StartUpdateEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).StartUpdateEngine(ctx, req.(*CheckUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_CheckUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).CheckUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/CheckUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).CheckUpdateStatus(ctx, req.(*CheckUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_UpdateAndRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAndRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).UpdateAndRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/UpdateAndRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).UpdateAndRestart(ctx, req.(*UpdateAndRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_CheckCloudConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).CheckCloudConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/CheckCloudConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).CheckCloudConnection(ctx, req.(*CheckCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_GetFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).GetFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/GetFeatureFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).GetFeatureFlag(ctx, req.(*FeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_GetFeatureFlagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureFlagListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).GetFeatureFlagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/GetFeatureFlagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).GetFeatureFlagList(ctx, req.(*FeatureFlagListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_GetAlexaAuthState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlexaAuthStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).GetAlexaAuthState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/GetAlexaAuthState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).GetAlexaAuthState(ctx, req.(*AlexaAuthStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalInterface_AlexaOptIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlexaOptInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalInterfaceServer).AlexaOptIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.external_interface.ExternalInterface/AlexaOptIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalInterfaceServer).AlexaOptIn(ctx, req.(*AlexaOptInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExternalInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Anki.Vector.external_interface.ExternalInterface",
	HandlerType: (*ExternalInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProtocolVersion",
			Handler:    _ExternalInterface_ProtocolVersion_Handler,
		},
		{
			MethodName: "SDKInitialization",
			Handler:    _ExternalInterface_SDKInitialization_Handler,
		},
		{
			MethodName: "DriveWheels",
			Handler:    _ExternalInterface_DriveWheels_Handler,
		},
		{
			MethodName: "PlayAnimationTrigger",
			Handler:    _ExternalInterface_PlayAnimationTrigger_Handler,
		},
		{
			MethodName: "PlayAnimation",
			Handler:    _ExternalInterface_PlayAnimation_Handler,
		},
		{
			MethodName: "ListAnimations",
			Handler:    _ExternalInterface_ListAnimations_Handler,
		},
		{
			MethodName: "ListAnimationTriggers",
			Handler:    _ExternalInterface_ListAnimationTriggers_Handler,
		},
		{
			MethodName: "MoveHead",
			Handler:    _ExternalInterface_MoveHead_Handler,
		},
		{
			MethodName: "MoveLift",
			Handler:    _ExternalInterface_MoveLift_Handler,
		},
		{
			MethodName: "StopAllMotors",
			Handler:    _ExternalInterface_StopAllMotors_Handler,
		},
		{
			MethodName: "DisplayFaceImageRGB",
			Handler:    _ExternalInterface_DisplayFaceImageRGB_Handler,
		},
		{
			MethodName: "CancelFaceEnrollment",
			Handler:    _ExternalInterface_CancelFaceEnrollment_Handler,
		},
		{
			MethodName: "RequestEnrolledNames",
			Handler:    _ExternalInterface_RequestEnrolledNames_Handler,
		},
		{
			MethodName: "UpdateEnrolledFaceByID",
			Handler:    _ExternalInterface_UpdateEnrolledFaceByID_Handler,
		},
		{
			MethodName: "EraseEnrolledFaceByID",
			Handler:    _ExternalInterface_EraseEnrolledFaceByID_Handler,
		},
		{
			MethodName: "EraseAllEnrolledFaces",
			Handler:    _ExternalInterface_EraseAllEnrolledFaces_Handler,
		},
		{
			MethodName: "SetFaceToEnroll",
			Handler:    _ExternalInterface_SetFaceToEnroll_Handler,
		},
		{
			MethodName: "EnableMarkerDetection",
			Handler:    _ExternalInterface_EnableMarkerDetection_Handler,
		},
		{
			MethodName: "EnableFaceDetection",
			Handler:    _ExternalInterface_EnableFaceDetection_Handler,
		},
		{
			MethodName: "EnableMotionDetection",
			Handler:    _ExternalInterface_EnableMotionDetection_Handler,
		},
		{
			MethodName: "EnableMirrorMode",
			Handler:    _ExternalInterface_EnableMirrorMode_Handler,
		},
		{
			MethodName: "EnableImageStreaming",
			Handler:    _ExternalInterface_EnableImageStreaming_Handler,
		},
		{
			MethodName: "IsImageStreamingEnabled",
			Handler:    _ExternalInterface_IsImageStreamingEnabled_Handler,
		},
		{
			MethodName: "CancelActionByIdTag",
			Handler:    _ExternalInterface_CancelActionByIdTag_Handler,
		},
		{
			MethodName: "GoToPose",
			Handler:    _ExternalInterface_GoToPose_Handler,
		},
		{
			MethodName: "DockWithCube",
			Handler:    _ExternalInterface_DockWithCube_Handler,
		},
		{
			MethodName: "DriveOffCharger",
			Handler:    _ExternalInterface_DriveOffCharger_Handler,
		},
		{
			MethodName: "DriveOnCharger",
			Handler:    _ExternalInterface_DriveOnCharger_Handler,
		},
		{
			MethodName: "FindFaces",
			Handler:    _ExternalInterface_FindFaces_Handler,
		},
		{
			MethodName: "LookAroundInPlace",
			Handler:    _ExternalInterface_LookAroundInPlace_Handler,
		},
		{
			MethodName: "RollBlock",
			Handler:    _ExternalInterface_RollBlock_Handler,
		},
		{
			MethodName: "PhotosInfo",
			Handler:    _ExternalInterface_PhotosInfo_Handler,
		},
		{
			MethodName: "Photo",
			Handler:    _ExternalInterface_Photo_Handler,
		},
		{
			MethodName: "Thumbnail",
			Handler:    _ExternalInterface_Thumbnail_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _ExternalInterface_DeletePhoto_Handler,
		},
		{
			MethodName: "DriveStraight",
			Handler:    _ExternalInterface_DriveStraight_Handler,
		},
		{
			MethodName: "TurnInPlace",
			Handler:    _ExternalInterface_TurnInPlace_Handler,
		},
		{
			MethodName: "SetHeadAngle",
			Handler:    _ExternalInterface_SetHeadAngle_Handler,
		},
		{
			MethodName: "SetLiftHeight",
			Handler:    _ExternalInterface_SetLiftHeight_Handler,
		},
		{
			MethodName: "TurnTowardsFace",
			Handler:    _ExternalInterface_TurnTowardsFace_Handler,
		},
		{
			MethodName: "GoToObject",
			Handler:    _ExternalInterface_GoToObject_Handler,
		},
		{
			MethodName: "RollObject",
			Handler:    _ExternalInterface_RollObject_Handler,
		},
		{
			MethodName: "PopAWheelie",
			Handler:    _ExternalInterface_PopAWheelie_Handler,
		},
		{
			MethodName: "PickupObject",
			Handler:    _ExternalInterface_PickupObject_Handler,
		},
		{
			MethodName: "PlaceObjectOnGroundHere",
			Handler:    _ExternalInterface_PlaceObjectOnGroundHere_Handler,
		},
		{
			MethodName: "SetMasterVolume",
			Handler:    _ExternalInterface_SetMasterVolume_Handler,
		},
		{
			MethodName: "UserAuthentication",
			Handler:    _ExternalInterface_UserAuthentication_Handler,
		},
		{
			MethodName: "BatteryState",
			Handler:    _ExternalInterface_BatteryState_Handler,
		},
		{
			MethodName: "VersionState",
			Handler:    _ExternalInterface_VersionState_Handler,
		},
		{
			MethodName: "SayText",
			Handler:    _ExternalInterface_SayText_Handler,
		},
		{
			MethodName: "ConnectCube",
			Handler:    _ExternalInterface_ConnectCube_Handler,
		},
		{
			MethodName: "DisconnectCube",
			Handler:    _ExternalInterface_DisconnectCube_Handler,
		},
		{
			MethodName: "CubesAvailable",
			Handler:    _ExternalInterface_CubesAvailable_Handler,
		},
		{
			MethodName: "FlashCubeLights",
			Handler:    _ExternalInterface_FlashCubeLights_Handler,
		},
		{
			MethodName: "ForgetPreferredCube",
			Handler:    _ExternalInterface_ForgetPreferredCube_Handler,
		},
		{
			MethodName: "SetPreferredCube",
			Handler:    _ExternalInterface_SetPreferredCube_Handler,
		},
		{
			MethodName: "DeleteCustomObjects",
			Handler:    _ExternalInterface_DeleteCustomObjects_Handler,
		},
		{
			MethodName: "CreateFixedCustomObject",
			Handler:    _ExternalInterface_CreateFixedCustomObject_Handler,
		},
		{
			MethodName: "DefineCustomObject",
			Handler:    _ExternalInterface_DefineCustomObject_Handler,
		},
		{
			MethodName: "SetCubeLights",
			Handler:    _ExternalInterface_SetCubeLights_Handler,
		},
		{
			MethodName: "CaptureSingleImage",
			Handler:    _ExternalInterface_CaptureSingleImage_Handler,
		},
		{
			MethodName: "SetEyeColor",
			Handler:    _ExternalInterface_SetEyeColor_Handler,
		},
		{
			MethodName: "AppIntent",
			Handler:    _ExternalInterface_AppIntent_Handler,
		},
		{
			MethodName: "GetOnboardingState",
			Handler:    _ExternalInterface_GetOnboardingState_Handler,
		},
		{
			MethodName: "SendOnboardingInput",
			Handler:    _ExternalInterface_SendOnboardingInput_Handler,
		},
		{
			MethodName: "GetLatestAttentionTransfer",
			Handler:    _ExternalInterface_GetLatestAttentionTransfer_Handler,
		},
		{
			MethodName: "PullJdocs",
			Handler:    _ExternalInterface_PullJdocs_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _ExternalInterface_UpdateSettings_Handler,
		},
		{
			MethodName: "UpdateAccountSettings",
			Handler:    _ExternalInterface_UpdateAccountSettings_Handler,
		},
		{
			MethodName: "StartUpdateEngine",
			Handler:    _ExternalInterface_StartUpdateEngine_Handler,
		},
		{
			MethodName: "CheckUpdateStatus",
			Handler:    _ExternalInterface_CheckUpdateStatus_Handler,
		},
		{
			MethodName: "UpdateAndRestart",
			Handler:    _ExternalInterface_UpdateAndRestart_Handler,
		},
		{
			MethodName: "CheckCloudConnection",
			Handler:    _ExternalInterface_CheckCloudConnection_Handler,
		},
		{
			MethodName: "GetFeatureFlag",
			Handler:    _ExternalInterface_GetFeatureFlag_Handler,
		},
		{
			MethodName: "GetFeatureFlagList",
			Handler:    _ExternalInterface_GetFeatureFlagList_Handler,
		},
		{
			MethodName: "GetAlexaAuthState",
			Handler:    _ExternalInterface_GetAlexaAuthState_Handler,
		},
		{
			MethodName: "AlexaOptIn",
			Handler:    _ExternalInterface_AlexaOptIn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _ExternalInterface_EventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExternalAudioStreamPlayback",
			Handler:       _ExternalInterface_ExternalAudioStreamPlayback_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BehaviorControl",
			Handler:       _ExternalInterface_BehaviorControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AssumeBehaviorControl",
			Handler:       _ExternalInterface_AssumeBehaviorControl_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AudioFeed",
			Handler:       _ExternalInterface_AudioFeed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CameraFeed",
			Handler:       _ExternalInterface_CameraFeed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NavMapFeed",
			Handler:       _ExternalInterface_NavMapFeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "external_interface.proto",
}
